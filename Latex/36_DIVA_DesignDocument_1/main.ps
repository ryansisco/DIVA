%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Thu Nov 15 21:55:55 2018
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-Medi
%%+ NimbusRomNo9L-ReguItal
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter main.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.11.15:2155
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 755 2013-03-09 08:48:58Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.15, 2012/10/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 707 2012-09-21 14:17:30Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.14, 2012/09/18.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
 /startGlobal { true setglobal globaldict begin } bind def
 /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B1A9D89AD6CDCC3AF0AC533EB8FE602E
0ED9A6A38BB39CA02AB042CB4A5ED28E14F40BB90EE90FA42E15294545410062
3F8A7C29ADFB6E56C72C1511EEEA10313761812BF840E5A3CFDDA5A71F0DE135
2BECD0541AC711EC68B531947CB303C5E516F18F71F3E1BF0B7E35DEF1B2365E
76B03E578ABE923B594FE5BCE219F47FC173FF1AB61999671C1DFDFE54370EEF
068D17E4EB159C959B9384CB84DEC1FA2CE95309A64BEEC129E7A916C547B66A
A9DC1AF042B2DE7A0655F2B4C13B8E08EAE794BAA0858FB9C44F4AB6E59DF0D4
0F9B353D71EA5FD62993B31F00CF49D4A9F5635B71CF475B07250D1F6CD8D548
688D9913667384DCF20A3083960CF3FD6DEDA4861DE9EC3D9161B027F7636E06
CC75734240E4B00DC0E60C98FEC6C11C49CBE7C4D6F900090A037EE1DAF46C23
2601AFD3FAD238103434FCDE1C8E7526FB5F8CDB189CCAC92D86370D5F961A18
CFBBB502CF3C1C33D64C241B9F161DCA242535AB5346654275B55B9133520071
1ED945E18B4BBCE684DB558D875B609A4EE86A1212B92B903556C5BD4C395F38
A5F34137558FBB4ED364B7D0139D37EEA3A8A644AA997A5E2ADCD2FE2B1F57B2
5137A409334D0E4BCFB0C3250E81B78AE3D2579C577B6D816FAD95BE40CC0C69
40EE386D68EC1320F9B4B7A60D2629298B29029F44C5EBEDA79B3DAAC2B1F851
F14F3251AA55340C36307497E0CE91B6D1F1607EDB09F9C68ED412994D643758
B7B210BC4E6CD5B400D9440DB8DC2AD0D243E08EBA2D3B88B585A2121BB14AF1
E7662589173E8E4C06CB861E9F83EBE2C7C4361B4BC0D6AB383EF2F1E75C58B2
97FAF6E7B561BA35B55352927B6AFB9D9D8E57915A3A67672A458AEF0FC650C5
C4081B3F985F3F7867EE572D0214F51449B6F5E2F2ACC1A45B12EB286A699A7E
070699AA33E8DE66C1A25F81BC0B8BE7C648A66D773BB6822355DC78F419FAB7
C9E502D84E95D6D79E0FDB6BA53C1C524097F7E10700026C913A7D988627BF75
7E7E3AE3BF9D3AA5AD4F5C870DE0FE9CF57C6AFB258F73816CC190CAF25D9965
CCC17C93E29D4217A1FA558FEFF0485CAF90627DC9C0AD914B445B822AEFB5E3
B6C185648120398E67E384B4ADF0D9950A195F64FD3209C6D47B46B7708F855E
51DA45A60F07E67B8C973BE6D74A24C6AF12C6699B28339E298FB3B1EB9C376E
87B346CC0210DCE05E330BF699FFEE5B7FB9F34A31386F07D66ABC40B5D163CB
70171F7CCADD659E023687D7661D6B521F456E9B419BFCA97676A0BE66C3DC66
AA65B67B6294F4F8CE45811F1176F994C33D602D4A4B689B02E2D40285060ADE
FF8CEB2BF67DAC531B53256C34A5211FAE935E6AA35750640D810674DC2BA2EF
480B4213C0F02821D63A99FA651A9AFEA170533E89B97AF3289A3AEB828C89F0
402B564830A9D10F73AB871C254B8E7CD780E47124B0CE1D03381C2BADD4A7C3
DFD4E14E58A24AA57BA5DC14598081450C30AC6A4F392956A466D782D5EA0477
A2610611F343C60EAAB0D6E5AC3F759A8D57191F6A4AB9BFF96370D55228654B
ECD284FB7E0F8934B4EADB9957FE6E1BC8C6F3B13F9D98B4F52162D2907A532F
0E53AD0E8A66E6434C07DCC1ACB797392209251B20177321A546405EA5BF7123
2892EBE9E2BB72A7ADA8714570CF6C8FDB960B9CFA4444DAAF5FA005FF8B2819
471DB9F5CC63C7C55BF6365E0892CEF05D3DF37DE7926FEE39638FBB9BF42C71
EF90C192F9BFB83837BEECA0098262F4B7FB8870843A1EA3E4E6D2254AFE2F94
A65DA27405D5CD850A2186B103DB8978EE3A7C7BE835829D9088EDA3A1565DAD
1C08E402BD6CF4EC99EC3CF65AB9DAB558FC69B86672F40041DDB160BE6CC01F
856C1D5370A3F98510D85CDB54556BC6C7FF68FBD042B87F1BBB2014405AD0EF
2B7EBD236173C273D746B08CFADD5DE17B5C184328F419AACB99AD11F2D67B79
9250CA83643797FF26A6EB198C64AC39F21E3CD1E213B2A0E953A1F50DA9369F
930ECC63475BBB8C694A254125CE78D2089907BEF99DA3AC219BEF7775B811DF
B5D2B62A349E286CBEF696FDBE01DBFADE8AFF85870D377A40052264A4BCCD0F
179AED314927FB1155064428A76BEB1D07C1F5AF940AE10810EA73B974BE8231
198A7F50085126568C94D50F0333E3F3FC9633247E19A19B72A44485176AB1CF
9E7127FE0BB532599A6D1FF869310ED95BDFFEBD6122B38FE681BCBB8BE4321C
844E5F2F7022773A5148DF78B5AB1195B48B8568FD9FD11EDC99325102F07E88
656D591047EC22A936598B5E50FC8DDC8DEB238A2554A14A779FD556341061CA
3F2BE8EFA332637AEC878C2ED55FBB8B7C18E2A7B55A71827007D54E603D8821
1A58C3461390711E0E9DDE26CCF1965E76FF2374E368F34CA84EEE10ED317BB7
A7A45CF75B2F7C16F5392CE24D5746D5A01E478B28EDB24633F4C244B9A75971
A15912493829A9EF5B253DDAEBC5CE6923ADB72396034F8C397A34C42CB977A3
CCD90B96ED207BDDE1571E62FC7E2E104143923BF639CC3241D6FC539FA7677A
53F9CABDBE91FFCB58E95D2B28C3EC7D6505E4719DDF8688A69754ACA70F3D7C
5D777D6B1B40215989B70E96C682B067F1525DC438EA0076574A376BBA763BF9
759ACC9DD14B661CC9D209B631F3FA28B1C6B133EFA43C454B12960451CEEB88
2BC04DAD2CAB9954231E5F5EC98D713D700F4428E59C4D8FDA511BCF6151A5A2
A373A7E4D303AA48061C948BCE3C0DF788D6CE04F0CCEB2BC5CD3AB10147B5E0
43924D775D7998C24EBA31AA77DAB8CFB4A81105C83058B840F07B363A39EC57
901E110FC5501F995BECD1F11A3D592C795528DD7E61553775A76C52EC37CB7F
6817C91275ABC6B714C362BFFB58FEADFCD01EA6C1AE91A43ECEB88F7A7E15CA
149B7ED7E179C69EFCD7D6AACE9854EDB8124520C3D809D21E1EBE2748708C0E
94AB8DD3C47E5F401F0275F5B47C0E8BCBF753368C9AF30F464AE9CBFC15EFEA
9D7323D2D0F04E3DA91485B23F17DBE5EC6E04B7B242F204A75BCA2566C62F47
759A713D4E09D891710F7F0933AC65DA7A41D2A3393092894BD9860DB57F18F3
EE455C2115182E6D0DEB27FB6933540EF30ACEAF6AA9B806F94FD3FBA1833F23
BC684818AB259FFB0EB76F3FF8BE68BBC5A2255E789ACBD75DD3D914DD676066
901ABE065899ABF96DAF189873BBAD86DE994118A3CDD0D72D52948373E38251
C508E4505E8455B91A1DFB78BBF223A60624E11300A768C5D30AEC5CD32BE65F
D49474D98EFD768D55299B7EFB84F698B53F9946F115492C8F03055C82927FFA
FA6E43AB242003A1FE6FA61A1B3F44687041F37ADD6989E85FCA2750C9833A14
4F697E1407791DE270911E25370499A5D483482101C0940504D221F9A3BF31F4
584EE9B292513D2835DF0D37360A9B5DE91E2557AB5F1B0A2DBFC852AC024E59
6C0C46333C5424F9C5EEA9F569F1E4EF16B7F259D4D3D6D1F0B06737D3F368BF
F332A751F2BC51A900ABB51A058888867F82BA02EEA5CAF476C94682E15DB5F5
3ABA109799C10F25FA2E54560FD76DB129E5CFE6B9BE5EB2233EBCFB29D09C21
4FD2DB603A10E2F8C3EA53645E2E7FB17FA52F6950C2021CFCE2062EDB9B4584
D8AE5F131372118C624DA530765DCF97D816B3A6CEA55846C376A1DD2D4FBCDE
B45CD653177BA3A5F3361EE4B989D3AE57E9FAA62F9ABF48FD69D228A8676DC5
107257EE72850674A95EE8D1EB72B5DC07E851BB678D3DC2BBE2CC375DA1BC97
C37A5DAADA0E51762D674EC051645726340B2A182FC0718F7E9D9CB0C743E3A4
337A3DA72D24C9517878E12810643743FC7E8CE14C9FFDE40B8E137BD76A4E52
A5A74387C9F301ED106305DF2882E57E2ADC185C844E9F0246F8CA03BA84311B
11F02E595E1EE2EDF7BD08F2EFD59C7EA11F70FA5E69D6D4673958D4D4F1CB3C
D4D6AE55A5C48AF26AC80D843A7252E1C1D2EE59202CD319D55DF84D7A0176E5
2BB2F9CF2B71058CCD97763B6A3F95EA470066F3601A5401AB2ABD3C25D5C9A2
FA8C392A82F8DC836C81B5AFCFD66778364FF72B116D0C52E5E9849D674A1276
175D2200ECCDEDF261F9F46E384542745A1643E262C0829D3F35E73F44EDBADA
9366506CBAA020A1B77304C21C367ED637248BA60C423A8D0E5D3EBB466FB249
C2CE92B3E774C4A4E3BBC0A1ABCEA674A75CE6C0BA0121F2C9AC0157AD63FEA5
51B3449D6E97730654F7F733986F25CDBF6912FF3D8A8A161D248E928028CA35
BA8D13C6B642E213C3CBC8498CF1AED81BB82D58C6BC26430662D2EA4F4ABD62
5E32FDAAE9EB3ACD646C1B9E0113A1C09295667F372F2176DB814982A39CB410
107BBCBE4B5F3F8CF3C20A8E023AE5676901564423F1F8A3AB5AEC5A549EA570
7353F50B17877D33CFD614E6D82DF617F77EAB048E71B51B3BA75EC534F4A676
7064EA4E5F469E48F5AD2885076AFE113428F97C90CE6BB807864506F89517C3
83DB4B9D2BB182C9F48E9D3AAC9798AA82080B0B3CA0B0F7EC02D7FBF3B2A29E
F55C6ADAA3B2B49B17F297793FDA280740AEB14B724BD33EF52F6EB0456379A5
018902545D6704F82FB9198EB076A4029497905BD4FE34394358212CB5E6B623
ACE8B379456632E7FD1AA490E97EF1BD458DF081698E57629822A651684F29C4
0542E30D527396132BCB03963CFBD921F0CA89ABBEE5B7886F0CB27373524C3F
9EEC1498F156F8B5EA0723C590C09C74A5EF039C8EC2F9BE5DD4233919A7074A
C1F62CB6FC821F18E5B987B523CEDC628C348A5E7AFF8DF1AFCCF1F6B230EE5B
7AD60F1A573995DAD55BB790621B98A327B25175E4332395AAEDEA7CE5376E3F
12F13836EC8914591D2F53816FF03C55C0C3A6FA78C74ACE9AA10ED3442AFF0B
3EE83922A59D24362A95F690FF34229196C21CBE5671725C1EC2AAB2ED935F42
7B31F18A672D31DA3CFAA35DB22ADE121024D54A85A6D16D469A20CE3D0401A7
B165F5271B585DF66C9995A52A2FCFF856FA5F4239F26C8F4D4B746C0146B48F
D61007E164E2684B50454512F40E1BC647FC0A7CC31B1E19D7E9E32F7588FBA1
4ABB67C78811F9B0BB41AA465BAB4618866F7759A4B8825A7A0934ECA23B0BBC
9FBF9987D207E80964F2B5ACFF24F594356AF9B41559DA4D8E0942B118ED1168
CC432C5139EFD65D268875AD395EF2907F72AC4AB4B66A9FBF2F42FCA76F18A6
04A0CF33C594D5A5B386A2B36900589DDDD7C8FFE768538B1DF061BB3B5290DB
C5E083A1E0241CAFAD00CFA0EDDF6A0122789BF66501B14680A3B9650D6FB67F
E0E00A028B98F990B4D015153CCC2E1853473BB9B7B10AB94318A5836D68D560
A7D49F1DE0E1B857F2A6E1C9F73B641A68A0EF3B9E26314B306649FD15D7B593
CDB1CEA36025FF3BED2602A78D9C5D9A1BC4F4A9B93F5FCDE4C0AFC7998AD9C4
55EC59CA9D58467BAFD6F41D574B347A2944EAEA3EFC5C82D0834ABC9DB5DB60
3AFF1B41E383C497836451472D40A3881ED7D72A722E574CD5B2A1F13DE41E1B
62BCA72EE6CA94C0128CB84CF5C321541152709C71A45266F647FC9B11512184
65525373CB9EA2FBF8F5250C82C8D92AC07C8FF3233BDA8F6E6D3FAF39BC3CCC
45AAF733C7B0F74F32D282D18168BAD157EB6DA0A30CC520EF5235E1EADED21D
BB8BC0D3C464AA14A393F69D47FDA993DBC616E9616E091666DFCF4CA9F5794F
AB1273B440CD1A985E6F3CE8B6695BB5C696AC35FEF90B445C3D9A8753CEACC4
6105872731B251B6E92AF0B9183F250A3C6195A99ABAB7D64E156F7CB7208979
CFF8FFFCD6CC2CCC101FF9B5525F7E1B2D85CB7CB0CC25BDB1DDE2C6081209D3
3BC30694286B77CE7643211A8D3F8C39D2DACCCEA6D8661C35F64B601546FEDE
5D01D23FCF5DFAEB9D374211325C83EC6C61F05FE9018D76F78DA36497548E3F
FBDCCC969E1D13779CB1B8474563A3A8172A868D7E79C61D5253336E57F8F7CF
5828E16A1515B509207D3EB2DA414FCF72BFE2015DF7BCE51275AA6356954EB1
6CC75C7FECF8B3ECACF47FEB8ADC190068523F9DBBF8F9E96DA84724550248AD
6F5EC978835E2511E19B81D4C4755140557543610E3178C3F1DB0A9B86B02E67
40A24B53B1B5731AB9372954DB25C69C8029429D318579D6AA22081CF67BC862
F4A64DC1D566E39B8023E86F58DD6DEC5DDA9E86F5A2AD5502583E6FF5215FAC
08E15545086F9AFB485E924D53C768A33B81DBDCEC422AAC96637AA64676B50E
6A77E79F72DDF7E1EB65B81B3CEE64841319B05785998D0FAA44B83549541DE2
209B893F2968FF726EB83685DDB4D90069DB7C9F7DA842B5143663EA615983FC
C785224576E9E928A02E13A44A7E6E4CFF5899A0884293BDEB690DC928A68EFF
BD0C16BFBC9A307BB4A1EBC0863AC06F0BB192C8BB84303FC1A35CAC94F38F73
5C17DF38ADD1FA4019E1C78B8C7653E6EB3762B588AB3B7D906D3BFFE784EE6B
64702F3F968C756DDF97D5EFF51E900914122E6F7F85C21F7040142418486634
605FB2DC8090F2CD4669680E1BB64E75809EF6520F60BC12355C3872CD092F77
FE06EDC4E1678E88ECB1C02DE323917F5A206046CDABD9D54EA413DE4C9BC1E4
58C370725C45D5CAA5AD4EEC414B8DD564DD7A55F5A83F13A0A38DCA8F99A217
EA2C8E331E185FF9905746D41D9F3FFACA55A9F6FBD5A2798FF873B61D70DD86
3514548269750120302A372703A175DAC0EA3CACADEB74C7F8CD6B1BB2D743E2
950626C25A21B8B4EF506F6719AA6171455EE91FB4A44AC83C4DDCF29CC852E9
925ED99C509459DF37A30FD20738367315FACD5AACDD970A9251B9E7836C9734
A1FBA49B1380242647C611278696F33D4E3A411EFB6F65BE4FFEC8131AC21E84
37E175131C8CC487F7EF853BD1E0232AF3C4A49D41AA4C9145042A3AAC758995
A7355F79D06964067EB4E48927B24CA1AA56B0847081BBCDAC4DF36D64099304
1069483B189A1A07946720C3EF356B40B85892B12BDEADB621D092AA676650FF
097B10BB3F4466BE43785529DA663F6480FEF5F0D17FE0918E05C5BDB0FE7A0A
86C523C36EE1990392FA145F1EE19256CC5053F1B9FA68D52458DB21DD84471D
287F1C04B1D061A32BFFD98E311BF3DB0DDCB69FF036ED372250997862B9A996
F1A91CA7F2B06B36D3AE3C387FA2F08B1F916A33B1278BD3BC0E4596511CDDB1
DFDE8A1DEFF7AD5A3E59FEE1CF7729009495AF323A98BF7B5C79F189C58DAEE1
E99A330D8F1885EDBBA05D166B03A6AE4FB13E83319B8EA62F29F7234F378312
504395A5440A053B4EBF8BC39C3E9CE1AA9AABCF1D3C8E5B9F0650215CF969CA
36566EF4C8E797F6BA6D8978CA7DDC1DD28F8AB155880B938146562CD5BA791A
D995314E5F68C28D72C53757953E4F6046C53324C41150641F1A6DBCF0698310
972498405B65C8A8C49C133E2527794830A2EB1CDDA3D0F9D0212E591486DF3B
9CC00ADF43D7E7330FE8A2060CAE3A50A4548179C2034900F0248B7BCD70D107
35B41B16022C88692D9F3E88AB1B59E4F9211E90090D4C5204D621A4F3732A1D
EEA18AED52E0E7E8D308B9FB0F145C200A61F79676AA4D0C637A56C8A1743550
421F256DDFFD15EDB95FF9CEC0A5D9BE4BD0D155AE75A78B929A526A8FEE00A2
8D54886EF54A9C2D2212B8BECFB56BBF15F73B02BA68060CBBCF7BE7F82F20C7
E4AC66951D0A0432CB426117F507C27E7EA9EE86EDE58BE9F438B469DC7C0963
779141424F7C499F4FAD183269832E7C67E5945E1AE00269A27A0FF148EB72BA
2201073318066C002112E8AB848B6A347A6C8266E8C94B2FF44C87E9B286BA66
49A14D58BB93173E6209113E3385D037BFBDD3D305B65BF8B1DEF2BF0797C569
3895A9EDC26E8BF35A0938F7F25E2203C58E486A5AB008F9D78435424F5EE185
316B3271BB5AED09E43EA1FFD511F72477125AC6BC18FC3BC9A4A58472F93968
7EE20B2CA8158F3CE516352C8AE81EF59D83247048106C32EDF3FEE0B6E79C17
F8F674A02E8DD132AF39E4E868EEF904FA7F08AE8CBF60E26632871D66D40597
E4F2700B7B954BFF05B341499C69066652B6902EC9EA75ABF76FF4B424C52B01
8094FEA57C7953B20F0230C0573E683439478F96F248DD5C6F78E428F80617B9
18C53E4F0BA8E2D6FAEF722EEBEFFCFC34953094B8307239A913B01F8E6926D1
696F452D27BB71AADCD34AF8DEB85B1E3D18983D9228D0ED45ACE948052F7D7E
78CC8BD7B746B8D8179F99E42F384DBB28C99FBDB493FFD9BAE787EADB921DA0
D750755179982AE5214EA1E16CE3F2BAB09119AB30678117F7225A7264A33197
D8327C1115BF9CE52C5720152CF3CF5BD31E118EDF1F906791BAF55027761553
B0B79BF98054195963F13C9D599A818F4F41E7282067317ED1B236CDDFD3561B
801FC8EEB3F6838CD7A5A0B39442204217F6705C1CE3323F2DD4B6D2E22F46C1
076AC74DAC9CF20C26770C35649A1F8217B7D86D4D6F2D1CC48BB137A210FE54
D638D161A7532B3A9DE203C57BEDDA69E253507A388D45C525F4712E56157FCD
BCB7C2D8E0A59E37DA5753EF33772ADD6BD3AB67B80307FBB03299DA9113C851
5D6F5A6EEB2947DCBF7BA0EB4A84E947B0555A6DAD206C41585E742F285E24F3
68CDFEB61B1C1D77C747D4F65DC0BC817EE4AA9E0CDC370C3430ECE2C55BCF0F
6FCD31D7041147DD0EB62367D26DFD885C20B1595E8D4F552F84A82B1E888B12
C286B846C05D44D686A3895C7933F1B971B666A2B5EE88FFB02925C6EEA1A36C
2E32CC6BF4C18B946F49D41E0549F2FFDD3E675677E53709187EC6F40073D43C
CFFC52098D56D0A80277AC30534D91A761A41FAEB71C933C561CEE6133713951
4BCDBA8DBFF978632F746188E1F83F3F385DA3A318F6EC1415EAB6E2FFEE30C8
6F326F4231C2C74D2312258F053CA054333D4881D38FDE076ADA3C0EDECB96C0
EF436B0FA5933148812210AB9C7CD745ADEBFB7122443F43EC02DF4F622ED7BE
EEA108246D498870A52F2AEB78EFE99AA78CE6982BAD847C5C9DFD5FD505A972
B436C1F90B4CEB475503A65C439D88F710B6D02A67C73110D4F2556325EFEE31
522B8F21D8A30E825AB49FC895683C23C272E204900C79727EAD8754FEB25D8B
58A2FEFBAD2D5D31421A78281169ACD91CE48D4D50DDFA15D46F8B20644AA89C
C378DFF7892B5B075CDCBC178DD1119ADF5116DBA261BA86EECD613FAA18F09D
A9D03AD48D157B93163EE03F46E5F6113E792317C373E19A4DEF6C492EC4A43C
CA77380DB24B6AE3FA74B5E7CCCBE2E6230D13FD37B34B83E94C5FA01B7A3602
CF9BB33BE4747AF13D03C488F7FBA253A7C883B84D416801225C6FC3FC7292D7
7A4E8A4FB0C605A3CF5490DC87862A58CF4AF2E8F3296279445EDE64D1758526
0C81B61D1D53CE62350AA09E1C7180AAA0EA291A813408BF1FCC80CEB1E42372
6C1CB0338D34FE2331C9375654B4014B010B277B5BECA779F31C01D82BBFE8D0
7DCB2B9FA57043FC8EBA440ABC7C471A86E30FD57546E9DC42D01F54E7A9F357
3071E0D8B7DA9BA72C507E325D8FF1EEFFA49DE49FE924E086A90777FCDFEEE1
5130BCCFF26952FF476E5305C97E6D6F8A32A90605E5F372C73D16C01100FD03
D20DCF223D59FB3EF49438C95626543876C99F8BE38F014566836D6B20F8818E
B11C4114060FAD7D3E577C2D22AF1AC37825BB7A86C172402162E741140358CD
C54F8872D8BA55971BF529D1EC759CD12F97F0317D7FB7CBEE9CFF1952D33473
70CEC5641B0A5EE3350C57011F7781D8127BA91BB99DA1B590F2F314A1F3596A
F00C0F5C7D639D88F6D10ED03FA6B94010E40266774040C0AA3D558549ABF413
DB7A50D5EABA543A148601141BC0B878F0CEAED0E1D5E3CD1E455645D4D84045
D220E53B841B10415BA5B8AC0776C394D800383CEB9732A05DEFF4A735AD6D35
60BE95C7E5A724B05C0951C3EE48D080CFA55A66512B83DDDABD120F6291623A
487446556EAED962FB6F08D6D0B8FDB828986367E25430828C99B4C3BC013A86
207A37226BECA6BFBA3E1F809B953BB972DEBCAC6AF22456B52455F4B7F2E63A
D2DE87A63796EAD09E478AA1E2E7EFD853F5F99FFE7CE4A106A9F1668B2AA690
D2B2CBFC74F99F4A400DA0D51494E7DDF7BC432D1E929BB7B018F8310A352503
FF25D68F8B7644833E354DECEE6D0EBAEBF784CFA9DD9F401A45319856DD954A
26EA483DAE8EC76C1ADBA777CD98584091E96DB43254E911F9802F790BECE599
B9726254B24405B173498A7083D9E831449C3F4D70E55245779DD06751597C6E
8D1E8BAD30CB1B1B000B6C2E48A3825C7B3338D58A7C524CE58564AC8BFA9B55
CE5CFF1F6EF4636881A19183048DB653B7E0966955A1DE6C0097EC1BC5524610
6422AE6C1E9B3E85DB1D99CB296ABFA8CC6BC5A3823C0DA4D53E75984D21A6F3
0FEE7A98C4812CFF9CA216338DB34A28F256E4B825AC94437148FEF7BA2CA51B
0E8205A7C78E87970478F744C74077B732CC1C6D5CA32F1CFCC7B3B877649722
5899D55D8A050197E9910F4A1FECE87144BB4BDB7884CE97B7C000513849010C
30ACD4AD1BCA31AF8BB1914ABAA81AFFC24231D150D254EBE00F00B663384039

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BEB1EA95978DDE87C9
7B2188A293F30F2A10533A8BE1080729D8EAE95ADB3A4D0F20E59D2F3C54A4DD
511EAFC0FA382333B1C402C5557EB7C6E0B4804786463832323BD46651670EFE
6732E74ED7E06DFF1AB96261AF3E8D1343D48EC3EC1406810B1D9FFF19C08628
185D92C9EACFE140395CDC48DBB13D76989FE524540312950E283ABA1C8E09BF
2FC683DAA0E0C003FD3A0CACC3D34172433CC65265D255B58659028E5C21D8F3
D03AAA5E8B2F4426B5D9646999159AECF93DFAE4AC0F299DBCEFBE5504C063BF
B75B155FA9D39FD28D9B705F2C66A6D8DE1B20F63BCCF95FC104F14A4A4A82F1
006597FCE38EAA2936CBBADD4689E2AC12AB631C60CF670FB3550E5683AFBEEC
84B992D45A2680BAC63497C593C90728B1298DAFB7983BF339540A8D8280F357
6CDCD4F21401CE192B694582DBC021CFE1217CF272748BB9CD7D9B82A625B0F2
987083E1BEC613BCCB763A23259D1B1D635CECB8442177468B4A69E269481F40
D0047EB381B2482372B2C20ED895E24A946B868F9AB139E7A3DC6D9AF57EA283
EE09BBD61FC4AF42608C6E01E638D15E1346BBE8940C2F9BE4BDDA2E4322C052
851172A6CFB6830C394E62423A0D22D51EF24DCBE949D7FD3E6E525E86E041A6
DED9B721BDD6E2223145BB57CC550922E73CFFBE4201AD7462760440A2317E38
B52F9C8A8FA9E7F90D27E38DA7BAE33901AF57C7DB93E83798EB43CAD793E287
BF3CAD7E8CAE1E9BB5F52711E8AE3D8D0A626E6E61840B747F691339D47F8526
9E1E7CF1B65135F07EAF54D944AAB77B61B0A7EB4646171B8AF167A7725902F9
3ACDDBFFE238527088399F3214ECFB40BB188D37B7EF316D7ABDFC060FC2533E
C8E233CDF3BE813A9E2555122B46A03394E8950E439FB6F7B0164FAF03ACCD9D
A7833A213F9F08DFC29253C7E6F16C8B1F5607B42DA4B685827479170AE306A2
01142248276B7E4F8924750C8361FDB1FA32883F7BD18D8E2D9EADF26324E685
6C1174916E4B587B4A1FC3204748B39BBE76D32933BFB3185C3972FFB2522832
8970333D68C7090E454AF9E45392F1B4CA72C6496C2624F6F7E45CD885C5E032
FFEA7C337BE414E0E73CC759AC64F3CB8EBF8B5EB56F41B247F3F192608E2762
93EBFBEF1509FEB31E38C10077F1BAFD0E146AA5E7CF174EB3D74860697B255C
72846F1570C10F93D5FAF5B4BBEC5416501276491B79153F8DF73FD672A89353
20F972462CEBEBD4F449CB10357090B093AC6B9BECF2190F31C568C908C2A31E
6042DBCDBFFDB28384641C07C53CFF7417FA1F38C1AE39464539CD214B0C40D7
61DBE360876BF7709B1B6484862666B42AC19A860AC497B2126955553D214FA3
C5F0785B2B4019F6515215C47B8D9106E64F666D5799A8B95BB6B27932ADC486
BD9CC130D94BBD0543872FEBA04AB626BF18BD5558F69C9F18DB26F827A88DB7
FE3C52F852BF99C9C301B7E591CDEF451A4B2DDAC6A751F85F6E5C01BD4CC597
B395DF8F165DBFF17AB9A8B5879297295816C4E27B8AC0687914C658CB7CFAD7
8719BD6D36EAE84C047D636122100FCFB4BA3ED1AA95C0434F416A08BEA0FFDC
F8A90638660039D6EAD9A62F9A59B71D9E8E5DB24A70752D839DD4A4F6A61B07
1BA2AF315B8E1DEF18FEA368F63489F8963D45A7BAEC97047E208835176F3154
E8757A1C21857556EE412B0929546000672DD480C23948FBFFCEC3E9374E5D2B
C35BB71CE21A3E9C1D1AB20BD6C6CAA328BF57F4FA2303CA1DA764DB623D1E0A
59B9FE47D7D4D67C241D2E43F82E3B5CDF9007D9B8833335C407FAC26C11FD02
734A510548DE1788FF9C89DFBB823DF700E40C2990BD5D4AA0E355673A6A7A4A
84C8D8AA9CE2EA00D1C789FE93469C707D8180D4F078B87930A6D5C0E60DB898
E248DA95093D064B0E691CD79421A5C3930AC3CA0270A933E736D2E15CBE3977
A7F58BE278EE68F3CE7397B1A72FD91884568176BDC1727EE7F0633662921DF6
1CFBE71AE968DFB27297FD343171D431A8966084AE967578CF92BB1ECAD9C98B
20460881E9554B614AE7F58F3BFECB35ED72A0DAC208D1B93A07374374666771
E209FC921EDEFA0040F718517EB2A1CA3AD1E0F026FC3AD5D2EE4608A524C4F1
A641735601161669B687EB8F71B4B10568EB0BD821F8B99500A30D1F959A117F
176B9EF53A317A31B5CF413C5A6BC7DFE8BA9D7BE47AC91BCA24662FF0B6783E
357BF2DB29034B3007E7EE6C45FED7E0558C96A7E0F31A48B1DD6F27D321F6F9
21AB35524B5C1B8CFA5229C6CA9C8BB7B082707B2B01C81E80F92528EBB5E1D8
6F18AF20AAB3741FA0DCF02BF2759EF572804409B841B034CB23828A19AE9317
4957AE76A3FD7CF9024F39CF0CB960C2C0874B35736D76B0EBFF4AD9F19B4C11
FB42E6A907DAD902718028E10128290AD42AE11F3123B292CBDAAFDF56B64113
58E79B0E25FB02920466A890AD49EF58846A1BC0079E16133FD5C82FC9A47DB7
D9A6C88E6EECDB287BE36C9693093D4F36B2F11B8B5C888DC44FBA5671AF8850
55D4E7451BCE4F71C0381685A3FEB993424FB4A58E38F4F615D5328DB47A624C
029622A757003E84843B182C41C42860F1C5B3823B1AB84D2FD68546816E34F3
ABBF5B0416580702AA01E5F2E23FDC7B9AC3982573E56F99C3E0FF7B1FDCF2A9
4331A994CE5C9FF7D6D57D7E7BD7AF5D9A76C9BAABC82475A8F7A09A80D730F3
49A10762A66A6C1C515A0615D784BDAB1D8F1ECB23F8E937D306B11B47E5D82E
563B18913FA7C78C38B1247AEEA487C0462815014DCD28C3E44E721A361BEE17
0BB118A1BB322502D578F815327B4D933326D9CCC2597C601BDCF84562F77158
BFBEAD3AB69689DD72BC3EC46935535196CA29FA216E7980665A358233C33AAF
178C2E2E968248D5B79889D9133B6ED6BD14A69CABC5B7123EC9D0708FB4A2CC
E7CA5591627DBB3AB1258A37008484F27750EAEAE17A63DC636EE6CEA51AB0C7
5E7052CC504F68D10A2CD9E15A2FDB5D2EB4921641AC52D310C58FC911D294EE
7E91E86684176E98CA0C92948EEF95C118FACA7BB622E36E4EF950DF03AB43A7
75DE88FC98C2839CE66EFBB8FDAAA92A33CFF2B0D464644727B8F99841EAEFF1
D1139D8A35E013069E43530B402B78690275D50309730449352FC66534EB3F9C
4B3893DF4E25B71CA17D427219E0E2FEA78EE9E9BE9A4B975DAC526521443621
CFE03CFFA07140EB171E7A77F97F4E08C8EA82E98341B6BA6B03D0D5F1B81AE0
B9BD7AE7696D31B3ED5FAA6F7B426CE4C215599D0245D994C854FE24F0FE9BDB
30C2CF13036F9816B562BE6C8DE638CBBF51E226F26BB682FE26B32181CBB201
47000532417B09AE2CD900EF6A3D516DB18C39A7389FD9B360661E7EDC5C3FA7
EE41F6293A73DAB464E69CE37C0E22F658F999FFBBD950C4DE31A493044C07A2
E8A9DAE6B577374C6F8912C91485935FD3FA9DEB375F42C96269169A35F545EB
9B46AAD6903CAA69ABBDE20459E73BD516F4543A2AFF4A21C9BC9BA5D0107429
B5953FB1BE0128C6BD4F7695F34355123DD3C1D53DE852BD53B3D96D090EA3FB
C888F976BE53A8E2F5D224FEFC2DEF84ECFA90318A61B710998E5EAE433D8A82
CFB15547B339AF3767338F00ADAF0618554EEF9AFB8AB20F0F05BED00FD105DC
1AFBEEB764E93FADD0A308C5B83AEB4164DB120EA1B8036B6DF07609B047450F
38572C60BB4C4565531427AA6CA1E814A85429BF76E1A7D08ABCA4443ABFF10E
7687271C07281BCFF79F658BC473FC262EE2FDEAD12F1228C0C2EE65F3412825
E15AB6E3C75600D22E6C0CEDB44E58E8311964CE351D3EA13DB52AC6F6A1C3F8
D5518D2B40BE1139A5F3332699713A1D0E26C392220832FB036E8BF466C2AD2A
F67E91EC2B4B1BE8C704194D72A79D34A6BB009B09A4C293ECEB28980BBE8009
3D74FC73C4E81E8372D8D1ECA5A32CDF25E34A95065640E188384B82A9F58029
6EE177A97F5C50FF92FB804C7EE832FEE09D5BE34897555E41856D173CED91E7
7A8626A29B22DC5976FAF336B7DE1C16685B03F824324A65D98AF2785F363634
5EBA5995673CB82C886682E6E3EB568F46CBEB0BE37BB3A026D50C7A88DF5F48
0147D87DFEFE463F7569ADA32A3E4DC1E0F3236A1106CD1CF46CF2748A3D618F
DDB7A7E8EA484E2B9BC3B4936126CEA5662629D6686143B97FDCA298C41A6F67
98C5361119B81C6191E2BC7B2EC3991D7DBD228759702CC5B12BD66CF5E8CCDB
AE539202FC88AC0C591F66241ECA8269A34B5441CC0CFCBABBA986997DF4EFF9
DA9D46524E83B6EBCD96293F3F7FD3EF19ABC04AB7DB52E5FD49B7F41FEB6A3E
1BF76F90C60C078EA0E80F95F6474AB72279B090B194379B7A6E9D1FE1313ACA
0F2937E99C157A514EBA4CA3EE1435146BAE6EDBE669FE32478279CEB34C5CAF
7356E6A657A83B8EF9CF5FB8354CD66AC3D9442A5A9B59DD90429F2DBD523363
94B7AA42129FF8F2EF7FFBD8C39D495DF1A7472D6F2EF5D6B92D8DC565D4EC24
6DD85A12C6623396AB329CFA81A38B37113C32853420CEF2E678ED094EC5623B
CBAF6CC5D182B7DCCD3CFCECD06F68196A2FD01E778F6615FCF58A5FCD3A31D3
5B01059C55706184F7F8682D26AB48A12263C0608D23176F099E10CDA82FE377
9799F61F1DC8674079CDA5B955051FBF605C7D50D62A87D2585E03AB2857F3E2
6A3ED22ECD2FE214136D0A7F63D515E4C0794665D705FBD683A1B496C5CF51EB
386F20F2EB2312263479D67A6DDFE6B3B2C660A6C778D18B8F292E055113753D
000B13A98CC0339E144825766BC7D6A22C1045FD7E0F586CBF2D967E468B2E8E
763415D60AF32A9A85F68CC26A4D25872FEB3A4764C7A0A62A6B53BFFC821BF1
E02C91C149EBC163C14366CDBF3C81F623465B935961125F4E43D88E7B92DCDC
B3F560C5391ADC57E0EAF9DE3500921A7818FB318487A712CCC0EE9E5D1C1757
78EACAA24805B0C79243DA91D2701CB7A4AA4A5CBFD5A156E3EF0EEA375E6690
5D49892B70588D776C8F3157D3E1199474C14257E8E029B387278769BB6E2E3F
45986951F20F8718629EBBD60BE5ABE50A0FFA07366CF31BC3816E6267EAF4DC
7006278517C5B7C048617243BA0DC2E75E041F3D4B744C9153D58A96330D23BD
93E1FAB3CC59BDAEB4AD06372AAE7975D2BAF772F04AA0CEC1EE5295EDC45DA4
7F7B15BD90EA17E949ECCE816531A7612CA3111694728D25A665667628C2257A
A313B17B89F7F2590251A52225377FDB7D8C9F5A244AD7F4B62B3B7349934E69
E48EB70222D8B9D52981FA0474E73B7E00DFD4EDBF4044F0E247D957956045B1
61311733011CDEFCD8F5E62795B990DB5F017A12825C0D6425893B9AEB8BA48A
087BEA2DFF55CF5E3DE25AC0B17B4ADEC87FC0DDC68A26E11D7A9E290BF2211A
DADF1135C696BF44865AABD3A1FA81EB70279BA80B98251F9119B37D3CE058C6
917D4D2261EF3B27F4F84A27603543947F03C16F63A8DF81E537B689FE89AD25
4C935178E836E3111F4D10A732F468CF58165296CD5332C2667B316186A11277
A50542DEBFE49BE6CC438036AED93D9AFE101976005BDE68CE1AE6340946D23E
446DA0FBEB5F020C85B2F1B6269854BB3F271F2DD86AAD6EBD2BC01221F7E35F
811AB92B0F5D9DC9D0A91B93ED65003BD0C4D6608A673F885D3693094FD2953D
7CD808AD1982EF675877EFF172B120EC195D43DD298F750556198C024A084936
535C4D37023CF1A9F7A19EC131C5AB6BCFA7D35816E5862A1B8125409C3FA734
449C3B34DADF947075BE99F21B3269B691DC36A30ABA189BF305BEB48A5422CA
6E434CFAAD8F72831C12A52AAE64EB28B620A5EB34CC8E514F045566C50E41E9
4B66B5CE1ED0AD1ED3B185D5177C15AF28970C83A1C4698C66A8C900013C14ED
7BA85AA0302D4DA32F7803B9200043E29A62AA6361AE5A39C14B16CC8AC9197C
341105B044E7AA81165FA1B97A103553E0A7B47CEFD1F5022BE5B15E1D75D8A3
950397E5EF69915439D799B5CDCA5A5527048775EB15B80C65DB647AE8370189
0038BB100E2332B0264C617D7B27C8492D7B6D5663C32C2FCEE435745272FFE8
FE3D126BBC928047174BA48352CD22E77594549E5810ED4B2A01419CC2450286
B57FFFEE3BEF3E46AA957F5D1988A3D8F64CA95E2B58CDF4392E853E397DC111
E36130DCAED0AA9A795BE8806DEF6D861B2DAB969055859EDCB8E64134A0613E
440C107B95D693D287C2B543AF840091D69A3C1C428F1B9630F2D085E30DEBE1
5A07B6A046946D1BAEC088EEF89FBB6083B0267E52474998E3E6319EBAB3D1D4
F44B225D4C45112EB2514544F9411401FEF77C14FA64B96653FFD08CF5162AC5
1A6AD727D94AA242D99B153AB4FD709820F1173793087399AE2CD42EA3950E8C
685E1633137DD03F1A0044B5A38537EA95461EEA1A3CC7BC946938E4D4D61998
0E73841F84F59E0500496E84FD5E9A7E4E617236894E21A64F50AA7D53090F61
EB25B9FD9BCCEC0AD49298D807D2ACA57AB52253DD323B75170FB57B1D2BC1A0
C09325430B6C2F801B8B7E48C0291852C6AF3A4BDD471D1C6F941BBBA29A0CF8
44AECF49D237D1CABC96C7987BDB800DA1C4306AC740184CB367D70D8AB7DC74
4E42E756A68697334E1160E2ECB75AC97158A7C9038330E1EC7952C3AECD739C
9C425D09CB50B4B4BE2819E645A028C9C9DCBFE53223D096351D214B3DC904C3
2F710DACBAA77D5512943C367DB9BE2A98DC8F23BC236304721FD7C3CF1E5DC7
C05F1C8877B6246750E57C8B38CD3AD46BF9E112781D53309A054F063DFF43BD
4DC96043A1832054887EB177D6B8693292B7536D473F9756CE04FCB644C505C3
24413CC9AA82CB0A51F6AAD0A5B01A517123FB846DAFD3297DA381474AF81B55
84B054A5ED993AB9FBF4083B75C000F0A56FFE04BAEE21591AEE772C526E3F55
CAF2F4419B78FF39B929627428C3A6736D8BBC00BE51509F685173FC157CA629
76128D48E72C15EB77622A202A3062F218582C59B4973E4E9FB1DCAC3D1738BC
28CFDC81E41B8AB1123729DF3D047F8C04BFBE23628B4550B2727E8682A7A664
9577BC07041B903BF501EC242EDDA8146103B7D094FC1DBFA8012920F318C56D
B37455F9E07E0D00E38A7A2FF7E623808F4B3E81F4E9AD639A43AC6F9F7AD6B6
E558F1E9C5DC4C9888AD0D491F6F2347D9DB0CD7293EADDD2502C915E2823AEA
E66F9B3B31DF2790637E4375815EA4ABE99BE732D65189A4CB3FBD9C6FEDA5EF
8B6778869A1713C9B0AC672EB0F96A88495F421F35EB45FBB2781CB050CEDAE7
659CF21645C8CD14E65B2068CC40344D489CFB91D1E9D49119607BB1464DA2E3
E3FA4916BC5A352D4237219BC63DD7539228F05120819F5B4B7C9CB20FECF427
B33C669E76338A6417B4E3AB988FFBBA9B64E0A2CD60D97715676C5ED11B8189
0E9F2A1A8AFE1C6AF104DC95DDBD1FA5C60815A115ECFB15B40092DC0D71B8C2
21F564E3B93CE41523A37958C934CFAFE6F221DEA53828387548E83AF31CCB12
5E99666F49E67802B6E8420F32CAA07BB0E1DF89B1709291F4BA66C578727C96
E079B7D182471A75A7B62AFD13AFC1300E9C83F7C77420BC98381243A4DA9C4F
97B235750D1B2D1166B6F56A62E6C56C5515FB0A896534AD7BCA233ADCF6B1E7
53142B03C3717972EBF78C7C583107700F3BE8B0B2053E697EC9C422A2C97109
0F22E9F1AE97332F33812A44852FBFF3E9B62353C3A97B9B5F356C1844325C96
E7AD60E79E7902E7E7C4DC0FB25900D8EF232FE7FC238E891AF24D3D094E8BB1
72F70CE26827CC5AA6F7ED3791BB1E58A8D12285595A9BA9DEFB4FE7F6BF7BAA
0C2FD6CC817DC24DB3E37317CD9B1E815B1394618907A26702C792E72FDD1AF7
3DE436AD276FCADD4C9723C87331C9579B9F0B29ACDB03B249CEC16140927C66
0AF6CD2180463BC7E601831FAA6C3B621260A1550692E19BD247FBB465BF8860
8E8C9194FBBAF1BAE53BBA04D117B1E161EE6091844C31B27A444AEE94AB4B50
C967C42E3C0C636216FE8513C83EB088D20F6565C1A83BAB94621C67AB906288
F8538D90B480E466975AEF0CD75E578B169DC6ECDB5EB83510A1E006BCF5EAD6
6D027CF9315AE3AC94E0352C894871D4626A0F0BA57B92468040BB5F482D0665
0E5F5436F5CC1B787FCE71D64DBF7388CA4E534DF3F24A87B530CE16BB4BE3D2
8F185C4294A1D1B9C737188FE3349F559162C1E391719A57B10C11640599DEBA
3CBDE28705585AD899ACEC30C3DD291F0241A5898DCA8EE1382E6CF7C85977E3
BF5AE0E80D1F8DCA3C635ECD03C7343D790848D27036CD2868714AF2B47D07BD
FCA506F67B6621AD03843AA014E7C91D3CFADC4A0AA7E4136EC72989FD9D6413
499EEC497DBD49B9E6AE04EB142AF10C3263794DFDB66716F0C513023F9741C5
E09DD3911C268FE305687D2CD1B391BFEC7A1F0820816881585FC99110B20F14
01FE9002394CD1D0391C36
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E93CDED901EE8B566E969C0D0
EC80D172940BA3ECFA1C2AD06186907A91B3C71C70AD476F8D6E6EC6D1476CA9
9DDEBB0897B97D21ADAEC5AC1FA34CEF83450F3CF96B23EFDB0B46E25392CD6F
43D5C842F87B6D8F433F9402B18339DEE85CE619109DC5B0A512D05CF9D7D567
453EFAC6B42EA67174348066E173C5D0B04A7DA04505AE8A67CD805EC55122BB
58CD67DDE0217905ED118A54FCEFBD129D6310995B58DF6D920A30C805741994
1A114E40863B737B002A6CA958B8C2397A96B4924A0C7D7AF0112FF1A1DFDCAE
E8B1B75A2BBF37F423BC88E6BDD06F2AF61301FD6091FDF2C662612531A23666
64EE40299590BDDE05228EC140AFB5D7E24E2B18FA0D5A7BAAB82D3297C9CEDC
20F9601CA9FEAAD87981D6DA72961783F252E49C5574786F45DE88FBF2D6B94F
12E4EA3A9BDB285BED832B3D6CCE7DA625F13D9C504668753AA079E9B24F0C3B
5C930C245C7C4B18D30A7046A27AA007D54F2A1B2596FBFA1E5C6668641E4C15
421F6D812255D98D2E89EE3BB7AB14D465CB0E4F622144E415EA54E08AF5899F
D8E30152DD5AF9200F8AC8B8FA39413858E8AAD7831B58CDCD3666FA965479B2
A5F85AFA549BEE2E8B72DEC59D297CC24DB89EC76930D071A679EDCE7A30FD98
2D182E86B3CB63C968430895741B98CC3150361B8901E76B80E3B89A01CFB003
D77233A407AEB2B43C524664AE0AB89DF0865E14A2374BC9C5097DA8A9EAC525
6F54531F9515FA7A9458A630D71D56B733A086394C076F82EC251D595E4EE9F9
BE26A986206B75F6E1151D7A6D811C66C3EE048CB2DB05D0E50A525C31CED2F8
389F5004865EE88ED4DE986F6029A4C0BCA95791D20C323193B70D462E6527E6
C2214EE691177F70C00E3CCA1E36E5111D74ECE14CE6896ED7628FCFC441C30F
108F0159505E014A35C21FCB5478A1CEE42E144601E47E3C44EF2B9C5ECE1915
13362AD091F6FFAAB185DDF759DC26288A27F32BBBB4087D2B948DED6C44828F
BFBF98843FD61AAC4452EE1E999CC3901A7FB96C757689A5935BEEA90CCB0F65
8995029D088B980C1BFE78F9D07C79345CAA69F4DB314DC2EEAC844E3320EE6F
8E895A70F5E23C13FDF9A7724A5FE71F2D7C6A9106D0E42E184317DF4428A4E3
D4A3C29F9EAB7F88C96F904A61C147BE8A77CFC638E18403A6E9FF8767233017
9114653F3E146573CB07E954A869F1BB6FED5048613BF39CA8CB9113D9FCD0CD
3CD5E120D17FE4D1553265DB5FBCC07B1ED23BF5A2D925263F0642D7F9D0C274
AAC6D549981CD8A5A23F0BE5153792894E2EC1D323677E92AEEC7F87B974227E
87E49BF062A0768D650B6AACA3735000E477AECFF9C99670502B08373AEC3A5B
F90CC47BA7E64C532EAF889F14897C9DEDC7FA6A9A458600D94973E8E9C2ED99
9BF8DA8733528484627BC648CF7562D5D69CBB241B5FE542AED77488779362D1
86F069C5BAF6F1D488AAC19F6AFDBA7D2F9B0C79E463DAC9531E164AEA39D39C
8BE741364E315E7A1E4C54C87A44ABC9F2A6F66D76D0E3CA4C1729D61AFB79F0
AF65F7263D94DB7D90B5F0EB05D672139182B73887AEF649B7E572B218E736F3
ED7CE2198FA4819FEF76221162163E0E6030CBAB2F5DEC8540F7894F04FCE9F5
85789F401D98B421491A006B52AD6A3528046683C9BC1658DCE2E31AE8196F8F
6636B82C823CE8FE2ADED8C8EFC9ECE13975B73F417DADB522141D21710B9D1F
B63542C8AC4157640D52E8A42AFCC7E10C35F3688B13BD129AA699D04482E9B6
0B908C01494A6E3DBD2F5E24463742B088247AA031B16F50DAA186DD0C099E81
618AF2A19313E987E209E1D792D8A5451711BCF103F760B3DCB112EFA57AC6E7
964CD6B38742F325B080ADF0C9EC376B8B6CDFB86A6693CC2CB60D4004DAE5FA
B0AE8E0E04E2A90A30E488F7BFC9308C93B748B3A350343ED8CCEC5F4A502090
96F46D9CD4831AF0DB23B343601C76450B50E0F5BF3AE85F088C8EA777191609
979AFA19329ED93F01B02EAC7F83EC916555287E238C700A9DAD172D005487D8
1FCD7EED6DA0AF85AA2FEBDD9838DEDC52BAE400A2E89ACBAD934122A6518D66
83C4D7F48A0A94D2B63CC5849424FD0A6B0F8CA07C3E84EBD2B4B6FE4E93B8F4
CEBA2E66131C9991A6010809DA8292F21814EA7DFFC70F609B38E66AB0708C37
B58104B07E78FB4D48BFC86792426D65752AA5EC954DB469270B5C04CF7C29BE
51A9B40FA4A4AB4BB2CEC3DAAA678B23A7EBCAF98097861710D733B5510790EB
12FFFE9D642464F431CD4C5AA463BA71CE104B525874F9D3B5509288ECDB5633
6D015846230D6CBDCD1D7DA837A40CA0A4929782F67156F05FF785FE50E8724E
529DAE3946A0C3A1DC023320A0166FE149667DB0CADB3DB95CE2C74D300AFC15
844C6DE56949F31D5077D0D23A9F679573B02EDE5223B38D2B734D802BB36576
5D1D092407A2870FD52C24D1EE2CFF632AEC235556FDF36D734438ECC21931A0
FC96813D697A04B2B3F3B0817DDA6B84F38C9D6589CCEBC4FE1A2A0B8923F689
5957387686FA472B0C469D8D97C290149FBAD1A52548E29D4DF19FB9DC0BCF64
B60BCC727F9015A060C09502E182EAB0E7D0D01ABC1E310F7D2A2E68F3F1587F
476AD6E7850D0ECB9BA3BBFD9A5E1B96FACC944BDF8C87B00481144E1428E550
30F5DB1C8F9E3C8D8B59C972627399F53074495D51EFD4976ACCE231CB8A6744
AB00B028B9FEF09C60EC7EA62551E76D6FB2D12A6604E56F26766AB98A44261B
400B19CFA88B959953691362BBB1FF3CE9758C0C3DC52B3D7F98424284CD9A28
0EC4310D52D83966B6E87E274F737A4AD179AED13C55F5B2395EE381841E8980
62D65F691C9337CFC51240CB91FBB1F267C4F40723EC60491463F4C49E4054DE
782E2383D7A66CA87E169501CE5DA6803DD88538D8DD38E22689D398BDAD5C14
5B1CFAF1E6F7EBF70A0D6A872A0A9B9874F1327A0333D0EC5A835B1352397BC5
4B113BF9DF8F1DEFF432ABF3634C8A4ED49F55EC482057D17B020572B3A812A5
36EAAC36AE82FDB8048CFC554962D553BE5AFA06E86BD82AF43D51C0EA3E6090
CB145B94451BE0B68FCA43840B1236C9EFA717434C2A95D55F2CB445CF6D9FF0
4EC2312D219664ADEA2F03FA22E81726885DAA0773914440DA3C0787FB5C84C2
4367DD6C3156B4B5722E1E4F5B61922DC4A068F35B9E7EB17E895A9862CA1C88
61169E68CA74E4BB24CA63C80C5ACACBBA97D1003181605A1CE8F509585C0ACA
D8E57397F9B7BE089A6C9DEED55254798FFFBFE2C853FF605E31FBCA635DD07B
98A6C76FEBEF8651DDA919811856CA6D1296CA1A7BE84FE3BBBBB9315EA6D786
9633F5E9B79231AFA4555DB50C7568911F6BABF3E498F4996B1F2A18D763DA62
36DDD7250442825D7CBF851259B0F872D5392470A172C6B48B8FCC44ED1673FE
D8B164E338A7C1DAC3FEF6CB5E603B1900F9FB86718A00A4209FB0E69E3054BE
A30E37578F21DBE61071F02FFF48DA781EC323CE9F04A6940F9B3C12E2B7B235
D514B13BF3E33CA454879E06105E7D7D313EB77105A65EB94AF059C5BF3FC1C1
9A7F085D9DEC3446B7D38E746F9E30FF31BFC9CB72C04132239D415741E550C1
1B96F6CAE997608D08B5EF26C1C7317D6A8D4BF72887D480235BFBA5FE221F82
FAE8B119141D7B41CFD13556569E88C05183A6B338DD38AB88D39F5E6E251D91
D5353F9560C83A3304973B70E1A4CD198838FAC38B735B33627ED8F43A4AB37A
B6E02AFB8BBAFF629CFE81D098BFE50548926CFFF4C00C1E197DD46DFA6CB091
44D952186962C49450BE0A667820B7B366133602D52539A4C2831017A01909F0
12AB89B1A81E894F0EAD4570BD037B8DA07FF36A4879B92AD6F73CD4B2C393B7
AB69E6FCBEC915F18F0170C5C214D83E06D819D57FC59A35B20F39A901067B1D
A8BFE99A676FB9A026489EC583315A0ED505141924A434CD7FB049A99E548232
17DAA510464E27EDE46F568791CFA42223FE124E12F6D74C2B699ECCC1820F9D
053B6B15049418E59C5418E699B68967704D31695637109405150D9B3A9D82BE
78BA903CFE41A030BAED3FD73752C693BB69DD309851430179B57D2AC8E9DDC6
1C0E9BEE7AD5DD407E9C24B5C70672D5613B831E9FA76E8616968E6930E10860
868D05AC944B7B713B63DE9465D57A2992CC43893291BD393C3107BD10F058F6
1B109606A45F4452068BC04A6F55241DCB44496CCC13711EC628A4A677DBCAC5
B938C7ED83799F0A16B3A8239F76E1D3B34CE214709FDFF7F0C20B11FDB0F552
29455C24CF54B6CBFDCCD8537C510BEEB69D403D267D5ADDBEB1A48B1597EF3E
34036AD1E20DCDB36324822CF1C8E8C4B2768EA2843A256BE75DCA9392D9F6E6
4F47C889C7BF19449A11807963BD02C6E586FF9A74ED949D368FCA6CD06906CC
A4D5FE82E13E99FE5A07AA6127A870FF2B0FBFC1F2B4733850A3D613C536616B
1AFE92479384A60160D456FFB8E396FA1EC77D82963B29BB0ED1195074A729AC
1D46459A36D8F643413C54F0384C24BBBC7F83A3DD56F92EBAED840C4918ABF1
9BD44E890380CEA0B0E0CD7A342D560BF8BFEA6EE0A240100F8D5A617EE61CC3
BFAAF1B415329AFE5324BF98B920FF47C0265A721F93E53FAA61998C854A0AD6
7320C14EAF892088DE7FBE38740DCEBA79CD5F19620451BDCF64D88C040B1856
3BD2321E4FE1EC6A122F4A2B51C20F5947D2CADC897778EAED1C49F8035E5137
1E4F340A57DCAB2B635F85832FA320CD9FE204CF2F99B0E1800708D97515CB6C
F112C2A89D2D44816E907413632AB021E1FE2A443AC56DAFE0CA144AB9E02C21
78715C846C1FF57890925A192A2CDA1BFDD81F7A2FC4E0191694A19FCD8E5506
3239A22723DA0ADC91D3BA889382F85EA515D665F6BEFD477FC3D2D0497A8FF1
20E278CFCD460AA15777BFBE815955AEB9C37A069476C96F52F1BA59AA153AEF
A7AAA0B5DB37982080D7FA0C00FBCE22ABE468EE44F6FB3A2E548B4F0E0AB5EB
81BDB29CF0D16A941307E86B644D139442A13BF94279A4EE1F89758C33D6ECCB
05B249C95DE657CFE8347CCC869A0A5F9F1C2DE3E85E5AE3CC87A1AD517170C9
05FD301758360960F3FF142E10AAE08B2DA6E1F5F9A10B3B2B1F35F993DE1484
BDC0572CEA4B78202C85CBBA637B50BC24CADB53363B7A4CBAFB38E0E351FAC7
04CE6D25C16A19E687510AF5EEEA901B87752564280289D0007C741BD5C69282
459F7527EE2BE9B145FB56DDA3F2BB8E6DB86650D0E4B4C930704776BDC8F587
351A0F32470313C5919DBDEC7204E96CF547F56244DC683808BA8B03784EF566
497DF949ACF8841F302BE362D48DC9D638693F0318A61A06F26C99EDF2D3BC8D
252111E851822B7074F66D1400CB8B71CF6D6772E5E7742C652136415D8D35C6
D0A1B332502F48DB2F5696E24B354AD9FE17A078E8ECA2D832095137F162BAD0
1CDB801DE1C40AB059093FFB211A95E4F490FF3325CA67FF440FC36E0E801F53
7814C4D778A9C500595A699F25F5EC596E9DC4044DAE413B0EC7EAE15BCBBEC9
80904227C2AC4E082CEECB6A871D1C1CFF8537FC172298E39F9D5B838C961988
292C1BB132ED87A5274D0CEC8F7E37F5F5EC05D1D63DFA3E63252D89DD8CC12E
79ECCAB56D0C25221C40BAA4A5324B79BE99EBCC1B00EBA7A59C6F1257E5E0A4
FB5A8D08B96311C845ECA7B4FBFDDB145500D77A97A8BF392606010F944ABA54
37B46FEFB4C4B82001A8B4E7DF01CAE49DE944C25FE946323AEDE5F026FAAB67
21853E0A4117D1B4B6FE63E36597036080C9C93BCC120E2E8273EE34C3A4EF08
8BE46AD9FA0D3E24F2FDCF57193CCAAA36A4B77425FE929D11197E2F42F5363E
6DF22BA29E867F335A421F20170A3AF187C72B119BE5F19E2D9777719D6D1C4D
5C5A20DF7A300E7DBA6370B48142B747B4373D23EDBC3BF495DF819FA518194C
6D281CB9F6F790051CF881AA21E8523BC287BAFD0D4CB5B549B69AC94FE49798
BC49D9D9D49B9CB9429CA197321B545625093729F5BE7849C3683FE698C4C99B
11D90001545C4F353B39777EA791A503CDE266BD99CE1D2976040390C6BE1938
DB4AB8F86636C0AEC29115B1A100E0941B86A910EC9C9749EF2864DAAFC2B488
6C6E9E9D214EF74920C44F798B2719D9BAF6807337B8BBE3F3002874511CD9A2
CDB39495A13475B594401F8BEA9ACC2CF2FE7F16ACC2F43FF9384AF0562C8569
4C713CE959E0FD12E786E0AD015C78FFDC31004182ABFC87710FA0AD8571707C
F683B84140BCFC5ACB0F725E26593BEDB115AD90FEF76D4B8F4E096E2029E3EF
35032DA7EE65899F4BAEBDA75217E0B805B6ED96C2607A0F1A814D91311F03B4
599B2563D5D0E368D6C6CC18FC4E7C07E9AA1F4D9C65C3A5B0D929234665B1D2
AD8D5160C7E9F656D93EB214E1FA04F01B66BBDB0AAD09C439797D92E1120186
B88DC96CED6B17F42258D65F1FAB9FBBE250F5A6C3D994EBC7F079E809BA8EB8
6992F1655E32EC0F3A909C9E8EC0A1213D3609D7226F568BA8A3E67E4F436A7D
FD63B73F243830183573838E83B1EE3C9854207B834F7A3F403F59A94BA9B253
B9A1AFA8B821DDE2F0C56CA3808FDEC5E0121F6CB05B2F13F52F77EE26F3E99A
3E422DBF10D8BDD44A2D4BC384F0CB459491C76838F536FD93AA48815F60DE47
FF22A646801EF848397FB57CC353D938E0D9154FD2BB8D104223BE87991F755B
2DBA4BD765F7A4F966BDDBC0507DA7B048F6F0A0829375589E07DF4BEF2EAC37
E9F37378901E11107F16AD70B17B9AFE2E860F4D6021117907FEA549013FD25F
743FFDA8A8C3C346302B79E9E395F5CAB8B4337FA560D02ADA19600C8FF1598F
39360D40639AA758231303650FB2E3EA7DE767F74D6E84A91F92861BEC15CDA1
4FF3FED905D29F842D1386163DBE244D3BCF71C666B0A5B524E738B89F8D9946
33E3E7682A570CF3E3C2303CF2EF210D0BF5CC1901F96732A98009CAE553A317
E908C6DA4596B2AAEE63B34E5735F198CEB491BAD5520D28288FDA61D5BE5A81
0A7232169565A5DD0DE97BD4B5D31DD2AB3A158924974C6CA677643FBEC5FFDF
853FF1F6B0E45E4BE3E27C553D7531FC15E50A0184FC8E0E3A1B1A119280F511
C3BECE1822371B61F012CF18F19B6A1A1C1BD83DB1393F038C937F3EE4F5006B
C4B6D0F070BC75CDB41BFAA1032DED90A59EA43320F4280071E75171D49C7184
2FA5F5B01C531E2A766D5DE4DFAF25B85C69FE5108626CDDC9D3D6101F697B09
48C4DFEF4BFA0430FD5C5A29242A09645F651BD5098F05BF138C75E890550774
1C1F981D36DA5896DC0E976980DAEF12DD33C53EA5A6062DBB19AA5F78C06E11
E8733AF4185105ADE2AC03251048A69B7E74E20C2AADB14A7E1E22C4D14414B2
5952FB9F925B1664907CA473A1FD2E01CB1197990EDF8444CC83F1AF7B279352
13CF690386FF773A42C48EF4AD284AF072BE982CEBC1898D2AEA861D0A93C641
9A595D11230573426A6754FDFA0AD910DDB31E7B4B4BE5EA212C4778F0571827
0018A852D6C63DB94895B33CC8C54E71E0756B492C763C4E867062C7A01A91E4
BB031BAD701C7BD1D0505E273F6BEE5C42399F8701A2D48B53A5F2B5EEF8C116
0389165522669C4030E2F0216F900B46753C7CA45D103528A79957F08BA5661E
890CA864D596BD43683CFC0900E0E011E8ADFE1DF19CCB2D51118CCF9BC2AAFD
7057954894FA6AD509AD38F50260E1792E31E4E20DFC391D647AC01C9AECD269
8F5B288669923D064C63BEBD65B4DE6458366ACC525CC69ADC4C399BC29D23CB
6F7A032E5EBA6FE6AEBC73D95D187EA52C2DFE95F7EA6A493EAD709322CA41F4
85B59EE7F1F9363CA966EF360755DFBF7D9A9488A7CB94C6F19B2493E5C30690
D68322F53C06880A71972D27B22A652AC7CAE0A87B5A0D8A371DBAA2FE592ED0
88AF9179C8319500243FCB57788C0C2E2C4BCFCCF0D6A762032A3FE5ACB41FDE
76C5AA5693DF81DA08CE18E9C45DFCC09EDA7AE963D1D391B205364B95B779CA
6F39929D7E57B80AD9F009C1B5C349CFAD8F885A3D4CA30C74613E0205AF23AA
2212D7B1C75D54053884EF88586CCB05FFC5891EEA9F0753E5FA7B1B2326F31C
AF13F8837BF5BD6C157FA02C1092D67952B08A5ADA04CA88C6B83F3FD610AD4D
7A1CC4D1B822E4B30330094E3ABE26398BFD765F3320924BC463D8228D3EF153
54BD07CA101FBF649A8F4E6B9DD9C3BBC4FEA8C2D1E5F26968F670B4A317F2B1
32400C3C7E12D4133CC51FEFF5F61EC846CEA41FDBBFDDA32EDC2824B00EDA64
442DA36262475EA8D6CB94127775162D04380B6A6A8650DEDBBAADED2CBE7650
3F3FE34DF9CFA2A2317D4A1D2390B36E5A8B62F31D3438BEE0CCE92D425DEC1A
A5CA22093A222AF420A9ACC0C8E0397EB5BB488D476D4EFCA5BE692C241108AD
B1ACA0A210405C9B5CDE246D0A15B36307EAD2720BD967C4C9B9F35304E24275
846157B02B1C6E9FCD7713EFBAFDE51948CED6F7B5F83024E9A3C46A12CDC92F
67387D81D444E63815FB24CF67EEF52F9A6DC92D19E70D2CACA87CBA61DB2FA2
0868587699A6BB8989F98B1BE4A9A869F8823C1F878A86EAEBD025791900F35B
D0FC57252612383FC19D2C56CA2CA535DD667C5F2CA7DF4BDF61FEB4AF5EBF6F
08D57FFAE34BFD1043D94CC8A34EF1C8404E486B51CF84F064A59940C67BDA61
16DB7C7D20B4330BD116E08A716D370F8F7E41CD376520CE39FD2A9ABC0B9856
655F9D9DA1ADBCBA5EE8339ECECFBD03C4D31652F4BD758B0748B26C9613A649
DF9D95D5D24C4B6B2795D94BDEB015C731EDF9EF916C94394D91C7EC0AA568F7
684A6B37CCE936BB42EC9B09E4DF37F7B8FD8B789AEFE644F929E005007E3694
2154EDE3A9BF589E24299FD34BD13605ED1672C9A5E9E34CC6B6717E8B794AB2
DBFDDF3A89648C906439AD57F5CC4D74549A52F36BDDFA8FF067549F3C6CA9E8
E36F19848614C5B184B42EA51452F540CA75E18B3418B6E63FA12606BF77E16D
1B038784CF9B7D4F33888BDB1947AB4B0247B4D041902FEF9E9E01688BF7A6A1
0749DD2BC565ECB955AE7E473476A0EBF03E3AC9E2D08746E18A701332225FC0
4635FD61D65A26527DC055BD861A6C23340D68B237D3C3618F2C2F86FEEE11AE
5BB62F5D5C0694D0F15976CFF3B13A19C14AF6552E6670F15F9CC15C9669D200
9B137EDE2064C8A2951F771CC656BF21141581DBA2D8F195DEED3CBD04A0149B
46C785ACB631650D95BCEA3BD95E9CB117617DB5FAEFD0F1E5A0647A794BD741
DD07AD6D39661CD267430125AAE44673821699EDFA81D9CD2E754E54C923F148
3F71B646634A4C5BF4B2C535FE5A29973E45876D27C65AAFEB563AC785C48F28
9CBF17C55D7A56A704DAAF9C494B9B47E1D85A98CD8D71BA013AB81CCE05B318
E4E966AF2DD3D0BB8F68DC37DFE2A910C88DC88FFB06B30063335EBE7CC569B4
CC25D26F4730ADC2846D60742BDA0722CC7D5C625F67192E457356F108D13FFE
53C044B40B95071142C5D976C36BD291C2D646FBCE8D38053537D8FFD3D7F4F3
A279294C9ADD9C3208251B6C177645D222A0C80BF3A8CCA876D474DFEA1579D7
9C7A78AF586FF0993EDD8D59CD411D5D2587F435EE214B8E33CC5DBAF0CE2FF3
C51F0E0A2FB2353D30CD025624C7B916A90B3FD13A58BB2F63EEBBC826E2C4F5
8AB798EACF5421AEFBA84C9BC4094C7091D3CE68F936908AAA25DA5F0B00EE25
B590F30CEF3BF5F590FF08EF7ED1A229D28B8E0E4568B3E086A102B8737FB9FD
AA0075C1FBCCBDAC9A0CAB64076EB9E9DA323F057BF773EC435F824A953C3AB1
F0B3CF95A2C2804BB5EE7BF0DBCE700723B454A8D9833B330F1AAA69E59FB3FA
6634CC694638F582CB1E6C7ACA5E857BBAC1D38941B000DE9E9245943A23E881
1E23AB283A35B20C5D87E15B724B62BB0C18F16F5F6A6EC1C3314567C88BE22E
0A01D250B6208658CEA6EDA0C0E69FAC766FDDB8E3D2C9946D021BC9F43F892C
EF56B1BF060B39D5CD50C2EE66FDD6947B83EE6F0FBC4E20095CE4C0F54C84EA
F18C232C028645A5ADC5E4B6C66AE114AFA7D1E58696A70135CCA2F848BF680A
F03858590E0974F2BCCFDD28FC5040C8E79920BFB188A6C909313B76269DFB1E
0E70C3EB905A56A7460FBC732DC15A037770B423EEF91E8CBE380C2EC84FB6E1
7F418B7300200F0C8DA37EFDEF65BC76D277DB7B455E4A937B004A3DC9776C9C
34508263844E00D8209A0D7CDED19AF16CF1A83DDCD78D676E71B6C51A64A87F
D82AC7FD782B89275261B6783FA8DBA0D35DAB6BDDA0F50004527B99DE185059
049FC2FE51835AE909D4638E8EB11C4114060FAD5D2A483EFA78F72F3AF83A22
333593A449E15701C778C5D004744F043FAB21D036E1017B60DB4C6E3ACCB243
FE9374F4B30C1A770195485E6B1D3E4830ABCB80D8FA6CC4AC85EFC2D28CFBA2
CA28A13B812424BA4402FD140BBE8806C33FE8FDA8E6703D5C9A2EA5B1E4860E
9DDEDA522704C5A927FC4F091B5900B9BC08B02AD6405D778C1749C31756BF9B
F02D5C797218E4A3284605BDD0F5D0E3024F40456A65D9D5472EA4AB02F0D34C
0B2BC6AC92B769213ACFDE70EA659682F45187EAAD570494103D598F013EA141
1EF3726309D198B7D05743D17711B8E138E42C9E9B2D346DA8E6EAF582DD36C1
D29166CDC5A658EE2DDDDF061E63B1BA2716124F6D3AC184BDB890A0DD4D7C62
B15DC40A9F810CB98D32B706A177AC31603F49A26F9E5F210DF60D4C22BE50AA
44C469EADEE3FE6E519F3DF7A42DCA87A9000DD5DAFFE353929EE3344130879F
2032497585DD01A6AB0D63050DAFEF2B2B970EA384CB6EA25D04E27AD6D30909
01719F072158DF40AA7C78D128AF38AD368ED4F736708280E7BC03A0FAFA64A7
C5FED819BEB1A91743CA1C9E6512F0FA82155AE155E6E458B4995D760C77B167
14C321E6E225B5250B8DC675AE6D23B7C82A5D1CE3C5DCF36ADC1931FD14E4A3
933805DAFBBD58C272D6208492E7A448B9AC27A37B81A7C0A7618327CF034A9C
96B52C7C69EDE11B274909FE3B79D5E020790534D6B52A4C6EE60DA2A9CE7073
E023A480EF8863FFA943948FFA7E16597B55FF86834F5C97E0891F9695060A31
89700AD11B06A9B43333BFD29109081403D96CD219C780181F8034395A1BA59B
325E5240139298877221F88A95C3B351AF4F7F6A0DCE2B0774EC139112727891
3456C5F3CE6C9CF23CBD507627DA646C979B95C08D758FF6E6B13FC009410C40
AF15C299D106B4762957F9AAB35FA5C74AAE3A3C08417119CF95677FA160B0B5
4B3C331CC8DF3D047F8C04BFBE22B7BB19B27498D264E5A199EC2ECD29C06D1C
6C4892250269E6CDA2C46A1574A39B61A5EBD0D519ADA58003995587F49909A6
399C1AC4D093AE96F31557A70C4542276BF29DC7C9DD280AE72E332B074E6DCE
1DA35C76424D7622840105B28113B5B51E066A91B8D7347DA871E7A52A069B0D
6D365206D43C86F4FA49723381B62D0FCD262677E3328017107CA00D0752C1E9
A19C49904081F0E8F9D7DA279097919A2254314FCF21D618A11C8FE5D40C0CDD
3716B714C94D0F9376E878ED733E90EF3EE62673FC1B354D93546A29395A5BE6
6101EC0A83496AF08772E3A0080CF4DFCACEE5513EAF3E903BAB38790E872974
1C15EBF54C4625875B72920956E2CA57CEFF63AA97377436395A3CC04D886FE8
0B0E447A91BFAE343170BB2E7CA8EC5A25E732C79C2AE5F3261266942D6FB60B
927644E9F7779AE1BAF3B8AA4BA26DC69F2A2446FE9687C6122F18ABCC0D24CC
7CCF80E57B87137DC95F002EE3DD35101D1DD0131C46E14DC4AA757196F84046
57430F1CEC5378DB3CCCC501550E3ACB7E4F31F88A4B4CC91386C4A6096CE3AB
0AC6745916FA18BB8FC92916419F76ECD4DC9D1D8E6CE20157EEF9F11D9AFE30
0853D10D3182F5726157123FEBE6D71C9542ECA2862DD8797666719E4F49F79A
A169C792898142A856E41F5E18106932087FF4370D1C25711478FD4AC8E03BE4
A2829D2E33F96CD42386C234A9447B82BD519B639D87A4B8D0506B959EB1924B
D4198FA0051E364D03B20E1E0ABFFBD3B6C69E17A074031B8EC4BFCCC16DC273
D4A0190EEAB7026226603DA37D8D9291E25AF279829F8D47B16A8D8C6ED56E08
10AE5994B981AE7B6F030E18F7DDF584AC60242A4A4EEEC6955407F7993C2377
B237D578107712792333087E98A8C64083C6E51F0E0BF508297839A84AD35C19
48FDAF5135B23328CC9CEAC2D7BF32B597CB5CEF31255442BF04AD5B8F08A115
B24EE66E1D478AA9DD9EE23415073D9ECE4E68732662EDD17BB9E76C94149A3F
1E42FEF7795BA4F9747FCD772569E557E716BCBE5A06689FFB85C8B0DDF9A396
3D0B1161934B23A5C5C87D078FDDB00C2513F3E8A5A080D9ECE69F8E6598B835
A0B93D8ECCF12C95304933BD4F1721E7087D73BCAAFC7EA12474452882F8514D
0FEFBBF1F53670535A7DEF5D003947DC745EBD95BDA180F1B054D57623F833A7
F9A20980509303B9B8280D7192C2790994FBDEBBC23000273645933425C0F59E
47609DD055B0758CC813E0EDBE55015C47BA817A1D303541DEA7B895CF4D412D
F23AB6A943C409728B918D946E250F5668637212372B0F67F973CD532EA2325C
667ED8305E2C673BDCC12135B2542128BBCE02EE3902A286E7ED3B55364DE800
35946C6E3002646FCD01738AACB9AD52BCD0D01913D39385A57F9383AA235717
AF84AFBF5D808D32048D67B3678A5B6B4667C90AF2ECCFAE7401CB52B5B4BE0B
F09278670404E541771CDCA5BCA8F492C4ED21BA36D3AE87B5EBACB8F10A27E2
B97314A9BFED3E1145BF13B2EA95C35A44216C939D3F93B323344D1A9C173F50
1848DC5BE00E44CE535FE171321A699B1B27CA6432E26C9F0048B1100AD729F7
2105840D01F61B3059A47DF9DAA4286057EDDE41FBF8349AA98AA567F1ECFB43
AD7CEBAA1E8A475CCB45C635B7E580EDC77556593EC3164531A0E3C211A89E16
DE5B8ED4F68A37829DDFFF80CB9DAAD047D01F2D9B8D5BE71DD21DDF88FA9735
C944C0C975D5A3E238F9B80DC4EF386EE0CC9986F58B06D0DA667BF6E56FCEEC
0857010504E234AB22303AFEA41C6D8F2A9B9480A48A2B4B1F875F6287898294
B3F750F56411D44C9DA28445B05942543C003087C31CC48202B43C643C7A0174
DC11F710CB9C611DBB270019B377A6C93A989E4F8D10FC6C08D3F45F522B543C
74B46072C80AC04ADA392460622B7DCF9F3F76373BE9660530BBDC91C070F485
D54B6C9D021ECB8FF3315C2F416517A61B099809DDAB0ED2D763B3FB7EC3F5CB
7E556A5036B036E8EA58EB02DD4A02C09A7A654549F3F7133FD259D094FF8640
0B7CB745AC7975085C773589DABFEB4A8F6C3C8C03FC4CD80421A623C2681F08
DE375531523A49E11852E1E507EF08E29FD7A6485FDDABC54A49028E80869208
EF324904EEF5985CEBEB70E570E86B994B9559B8D3C24E80C0D064B17F87BCB9
F55CA9C928EC86A72017BF6373D99C86EB317A42255A028C65CC1AE5190F1A6F
24E90C777436E1C89A27372CDC434B8CD960AFE6EF13B08278C88BC01630D3E5
586FD4B50129AB203FB9B950273C8481377F6B05F652EBB6A8AE4DF9B817B51F
B8D74C09688E5386CB0FFC3ABFF068800AE98C1244996CEAD930EF0692697DF3
C95FA12C459CBC5C30305FE4AC596A4D1F50957362C4680FED7F841B0106AD89
FD9FF51CC8CF8FF665032472B75CDDB3825AB3D67B7BFF74137B985B7495055B
CFA32620D510BE52EABA5397358161E5A0C0E6AC980857CE4C9D4C7A173E5FBD
8530DC9C7E6048D920F83D5D3BE32E7B97E69226685F06A979D18123144649A7
2A043610254AB1AFFCB4DD036A3E12655B4949F127AAE5801B910A87CE943005
3BBB50B2219B46E44966EC6FAA7FDB3A4078D64D54FE3615AE44DAE86F6020E2
E4065C1F1C5618AD043ED538C8739680D6B13ADBDF83B83173139ABA60450A52
16FF8013E132DD95B86E1825E1173F44A52BC8F28793D8636469A54CBCCABC75
44369922FA85439291AFE36D9F253ED851CD23FAC7E2B86EEEBFDDE2F6B8F3A4
F6DE9EA37787DB7AB437A4B866270DFF74A2F754FED14787B4E8BC30DAF184ED
F5466DCE4E72BB899FB2CD9547C7E5C4501DA0C03F894BBDD40550B25F76DB35
3FB7F21B41FC1A84757A311DF908F4926DC8D1624274DE56A8DE3086AD93920A
CCE7170D5DB7800C444E2ED28335F97CA6A97BD8C6807C219000ECB0DE204970
B1A843E3FFC02943DAB0A54B02677A6CF2401C8E09652C6A83CF84C19DB0A9CF
6083684D3D2A580323B2A014F6EA521607C9807ABD1703D046386BAD2163B18E
217B901D823590140273DD8BC0A7E34CBA621555B3EF194403FEADA0301E5FAC
DB20E321569BE26AEBF86DBC1952B0315B6BB3A7CF952102894400E5BBA1A3F9
5A989D5928C34DBC61AE948A412E5A08CD01B82A7F1689EBAC01FF1618B407EF
C0F429DF62F430616F03A718F4D51D69F142DCB3ED273808B048A910320C02E0
9AD2B49BFC103E1F667BCFB55B0E2D51638327E1F2FA81FE54BECA832D7DE8E2
48C92DF329E2D314B49C4D1F7678CAFDFBDAB63CD24527A0A6C83CEB92BF4F53
6199F92F77A4FE61BA4C33F712B774575119034C08659B4B583A341A58D1064E
04A96168DED17D23FC029A51D527DAD0DCBEC9B7E7D1FB7F7565E3AA79648A87
9DF5B6E2D2468937BCD3C76594351C8FE8DD5DAE0AE936193D07DB0D3BCD081B
F68ACD70E4C5244CDB12E7B2F90B62259CD9523BB4149C83F14E88D7D2B5E684
0F271DB67CB7AB972FC82A57B90CA0F2A9A2522B1EE90448387D608088E58DD8
3E699629D884EF3A356EF34A6D236E79656A12E8C931F265FFEF1B1EA1C46BAC
9C69131A51D7CAFD0CC677965983381F580970FC78A1BA987F9487B0EFAB2495
3A6181F3FFDEDF720698C9F1B3BB5AD2384EEF34EA53C58A4FD53EE9209BE820
C4BC7EA58D9B19912985C46653FFB260945C90E09D3CAE24B22108319B9887C9
687A859244B5AAF0F7B729CB3FA4DE9CBB6CB710881C1AA9AEAF8B08034B1757
C7EC8DF9BDE298CA65841533DE02D574D6F330AC3D914D0D46C3935804014729
7E8572A741653B6DEF9E3785886A466AF433E32E6780645C25946F0172B983EB
188B30253C166B90C4ECC0205ACD2847FC245C7E9ACE853FCB895388EFEE56BA
5AF39B237C53D3B30F39E6F82B458DF935BCF110F6192E0EA05C634DA956D8D8
F257466803DFC546C13D6D6DCEF284489F53DF31DD094531C1B2A56A8797BFAD
257F8F4DDD568DAB030464EB02289DC80091CFD2AB2E4B92ECF21556C9E6DF5E
2FF10CF7D1518514205409EC02804D08ACECDD0E8860D619B012715473662EF9
E51F6ABD11A6EEFC8931C2960E41AC1C4B64395BC5FB1EFA0FA399B6B4F5C857
206C0B15E309A94D4295C715A21B35998771EA17C137A8A1E413CBC5AB3BBDBC
63F05173D8635C4D4AE327F869A0DF534100EE7213C4D97AA9DDEF9680E5D859
228A4AC7F9E47851F70360393A3FB684B95A63FC90083F29794341124B5A732E
652297802CA6DDFB11218359320753AC178C8C5901BA0AE3EB756D91CC429D16
D7DA86423E232CE9C145DA5FCBACED2BAB01208F03FA6D140E079DBD9AFBC981
0151BB3F5B187D8321A0A283140C910A56D5B231639711B76B838128C18330DF
493DD069036713B642DC28F915B027F25034102DED4060F49D5F64502BC53C5A
C1CF6A4668AF1270BBE82E6309EAD838108B0EF40B9C433BECBAD591C7A6352B
7D5CF16A143AD990FE928DEF1EF409A4D98AA80794CA24D5336381F87F1FE662
23FA900A5108E9F2B35994F28CDFC0740830B9EDB23E36F00DFD9C66EC843C15
E74D01F3826FD4A4EE259E583741FB712B70C5B45F943CDB87BBDAEE823390F6
9C90938D39B75F2DBDCF847F324B7D3EF96617B1721A7FAFA872F73E5A630A80
7B453320DCE8EDE7EDA29FAF46BDAAC97D31A30940B6FBEB77BDAE0760DB1EDE
3D32EC7DD98AC67284397A1D31000B5642538AA76D2AA73855608F922E1475A3
9CEB88855249F36C2899B51370FEFB06F7F77BB15D615197AA41886D2CBBE439
3B6B72FAE04409805A290D7EF5AE7538771DDCFD6436D7FE979439CB19F8AC45
0788CFD4C015992E2A2616EFCF3D9B5C9AF327CC058F48A0FC7722847C88C9C0
A251E729F402AA91C7DCED6787091389AAAD15B3D4CD59CA73F0039CED3843F3
B7DF1D237F13FCACF7703FF5C92F88CA6FBE239C777EA3222207E864C75CFAF3
D2FEF32951F9F60148E86FE372D470B49659F570309BE66BDDC633EF0ABFF16B
DF714CE168AF26087B2EA0BA687BF4E2D262AF8B5839C7606EAC88AC8501C79B
D9131C0098766A7ABABD2B7BA3E62595283A96203648CF76CD502DEBD0F22C70
03F985CE66E6B2D0E5225E7D4C2C9F63BC677C1ADBD6BE9E772F19863592EE4C
48BAB7DC6DA0FC23DEE5CB156ADC791571D4859F14C80C79DC71ACB99F5013D1
3A7A1EE14E8AAD772695BEA5CBE9ED13E6CDE5CBB8A3915C53AD8A5BE85D02F8
D4F653CC89C1F504BC2EF81A82A2D3E8594475780E87F8A71F65902E8423AF10
89280288CCE64FFC7872EFDE08B7E3FD449E200EE27412D341EE80E788A729D4
F9E7FF3698F2B5C71A61D5FE43263163E3F2431DA3A769E7702DBA96CEEDEA79
808FEAAE1DF59904DE49123625D4EAD0FEAB4EB31B49A6C41BA452110B111DEE
F397FE4C9C2D506A0648184969E1B81EC6FE8A3212328C7F10ACB9531C6AC092
27CDAE432B5D40051BAD9DFD2AFF0AE4266BD251C57B0F72892AD3F8F89D121B
65E1A0459DA15639D394DA20CBE7044AD8B6C9828FC366FD7FE07B958BAEFCFA
F8F86C2090DB1AACBFB492E7AE25934B4C744E27D8C84820A808E02775DA96DF
01EF0EFE7DAEE4EF1C718232391934FA7B83686ADFBE397533913640208D1251
217B538948EDB7D5016B736FADF06CE09C22CEAA219B0DD23CAC9E6CF7E0D729
FCC866C6C100C8B009D98A161FB6AC112EEEE98C0352BB000975829DE4FC4275
61FC02C87A156CF5FDF38EC503C6D1799BC14DEB66D0C1424A910FB3FE582364
1838070AD1A227DDCDB603BD73EAE4F7F8F9C912E74964CB2CA85A27143B93BE
3412E7634D9B961ED4A687BFEA912F185E4AD4E0AF741D28BE21F36EFA6DBE8C
1C475F8895C6DDDBAE03B2FE74C534CCDEE72C8CC66ACC462F449391AEAF5C03
7739E141A74174A21A0AF68E8A5F4B86ABCEA0E4E2948D1F87E923F12BA60445
121E43C697C5527BBE954AF6AE692F2B0F037FD01B70ABE811931A686C343EDE
A69B48135F86E3791CFAC84B24B2DC4E3DBBBF4D15C674DD2335D51BE0CADF33
EF5E3722C085C95A5D1F36239EDCEFAC3A693910DF24A04D819C63321588BF9D
87ED53FB9CA64410C26A82F22A84CF3508513D3998173A9B7C1378DEC15CD6EF
F9C08C4763342C44249CE24EAC1E00376B351A189E2A6DCEDE5492B34112D34C
7FFE1A539AFA39A85EFD1E69895B12DFF2792ACA6EE48DB3E67070735C88B136
1E78BF37C23A3CED159207E02B692178A32E11CECAEAFBDE6AAA80BBE67A0194
72F1FCD13A93A00B1D9584E7AC859EA1956E9BBCAD2750F9B4615C832E2C9F67
03DEF2D3C54E8EDCE135C8C797FDD4FF06E71E6F7226C1588F03AB29FD7E2F1F
7D3300FA0815C8B518448D9D5E906FD2D34F93B3DACB296F5BEDD8ACA9FAD48B
C555C72858B5AB0A1CD11866D99E88AF206BC0BE42531DB58E92D89D13D07DC5
532420494BB46DAC2DF2D2CB5AF6DD691592DC9C638DFDD2142630B937B1A6E8
34072972C9A81F2F2BE24566601AF04CA848996D072E87FBEF1AE676750169B5
DFCB5AA127A5BA2F4979629FF9AF2A8BA43D3D4742A805FEE87906FCDA1A0AA8
9104B1DA87AEFB04AF4D71A7BB94E363EEE49DB465865E18319D8A2BF31F3BA9
FD98FC85A44A0D5E566EA6B8C6F35EC4F31C55A24024D338BB44B8BB428A99CF
27F7ADA4E35DD48C15106050DA74BB6E25A7EEB02AC837A37E16D307A51E7D38
B8F64068ED98F3A12E9326CC033798E2D544C5E1B1770101ECE8D7C6681F5905
E0484363BCC443D846BF13B01BC4CC20850F9E1AE935CFF5DE2EB709F407F832
DB8AE0157BE44E2424A2D810B3C55C7FBDB7F09E20C9E9B68EC43BAACB695700
56169A87088B061079580641E06BAFD7E5BDA7694ED3972E08DDAC4D235F3AE6
3E5ECD09EC1C192D326ABF07A199D5825CB5DB62FD07834C4AAEDB83F0E42F19
67A30463F3F07C7B6385A9BC7E27686BAD2B49E23E29AA308960733993DE64A5
BECC67DB08F74843D22E2287A9D0EDEB586774BF937487ABD5E95B8D33F5186A
6AD62350EEB0B457A4833BBB016E705618F2FE61EEBBA301D8958F830E0A7D3D
1296C94F103D442002CFCF1BF2C59722F53286DD1951E30BD98216CCCA787577
6A62ECA3F42B77858EF82D813BAA28819D9BE8F638125CA3F1E4BEECA2AAA840
837C062E5FDA2718A92BA82E853787A5CD34BD3B2E7E2413CDD9B237C0EC0D91
3A838EEE1691E218EA94B950F0347382F4ADE17865B900FB4770DD9B609FC8B4
E56957495DCF82A40AA4E9CB18AD39370C28DD8DBF0F4B603812614C7642D752
150EBA0E07BA5F2CA1C549CFC0FC2D3BBA47507772C3C7E17607C32A273B39DC
0FC12DC44693A078C85A840034353E43133AA946C6EDA584A7A73FC7F0E4DA59
1F210270818A7A66FF7C06DE106818077BCD3AC8E9C1ADCFFD002E65CA874A4B
7FEE06930A3B2FF2747BE19B601F66ADD47D625D698DD9A3B35F3B9530B496A4
9362BE60344E6DD7E23FF7A7331CDABB16E75880FEF26FD414CDA149EA4E7389
4BA03BDCD8F6D695ACD18EC71664EC7CAF1CDD08476E4C9AE0AD84F2A0FAF944
7C1926729FDC043846EF0452AEB7C14D29077887C033DA3A6E157210A3A46A4A
A203D3C75A9FCB971819C353552528CB6435F59D9C6EA067E7C32A29313EAAB8
E4904D4F821B972BA728ED471A5AF097FF0191CCA2E2255A3DF634AC514A3B20
0ED1B406A3F7F49E20B4AD74F76305498716E9B348DFF646A615746F8379826C
97A0438D05EBAD492588B0501FFE43BC8BE08A9D57065AD2FCB6A1E8F0801D5A
7BCAE4129AC34214BF1ACEFFD387AF644C395ACA92FF421A1DABDA5CE55F70CA
AB34353FBECDC0A74E118467E2AC0811E28E8774BD142BF1C95A39A9CAFE5096
BCC0AAFCF9D4111204ACA1EF3C22DDA7DD42104A5DD9726F83316ECF25EA4CE7
5F1B66C044B99CACF67AD53792A3A741590509B12C39A7FDA59330BA739E7CE3
1B0A1725BC94B0443EA102E40300648BDE930390F7F20B9154B3E97F8FAF8BA6
4659761C08FED78732185DDA5042CCD5C2B772B31FEB46F493D6B7D500A1E81C
3180B230BA84AACFC146C2A178D3EE8494F103FF86B7631AA94924A7A6264508
6169E7F0EAA86D5AB3E3B467204B770AF24EE01D72266E8260E63F022BF475DA
57F8E3309D3184915FA57423D105CE3F9C9C2AC4D98B0948CD0E7E449FD1D360
83D71F549EF5AB8A7AD14D4206D6E4C73F82283792A5A7207ED73941241DB047
EF0FC9B76B0E6A458BEBA03A74D5EEE2E64EEAB8A060523D41478B3B5F7A1C16
A84B5A0E61B4A9D2E9748388399E26D5CFBD25CBCB451834B43101DC1BDF5DF5
4D8018A74B47AA0C967CC76B1B37EA6DAEC05309FD19B1341E3337EAFF9F52A8
0DB76264A8B4D60FCC36A0BDFA640D19F989416F6678E81DC8113755655727CE
5C7217E6F82B50B4B969071E6B3DBA96F0FCB54FA9E7BAC59DDC52E3B07F92A0
AB0A4FD44DA7C2FE2718399DA4C67981DA9D7F58204B5EB5B8CE463E3FE406F8
31E7E66DA94DAB154EC470E93E7FD37A91F1ED536615B33A65EB588AD139225E
D434E1331CE802C925AD97331C3D10B965A08883D698BB4D9E876282BDE12458
500C1855E067901EE8237FAABC2155384AF0F54C0805A57EC46CEDA1D7B9A7C9
C3628708B9F034C87539DC7BD7EEB243C773862E06BD3EB549013F1DE416076C
64FD895249ADAA1373E95A580D03F009684A0FFD4BFBB561C6078CCFEE711CB1
B8C28584ABB2380FE74B8C394CB765139E7C25DEAA098FFFC46400C546535450
30ABB13CD9A1AEA20C2143A5EFDD16D83DA126D743908222EA10E5480BB9169A
871C240D0B3284040B1E580F111E65126595D9F49F33886FC785CCB007EA40CA
60C87228646D1BA2C6101488EC186353B9C4B2BB006FA80D3407DFEAA8189807
4380892EC6B91BEBCBAE3F67F149F09D73FDE8BE6306F9758002E1117F574C14
085A7BBC21F34E037775D249A7C5D986B88C164449BB27404E10618D13623815
6D4BB32ED8343E5762667D15F1935FF22AF860B15E35E87F507D027A8A346E0D
46C63FE7DDDEF2BE6F0ECD963B4078C429D91383E60E27BE182CEAB02FB26F40
CAE8F8712E1BECBAB9EE9BEF7CC3EB124E4362AFAFC078726CF20146D6DA234E
B14331B0661ADCE3B3A816C966BB314309C1105C579BD3214B8BBB6485D3A9D5
2337F248CBFAE7F797F82D56C916C0742F8BF7E7A2018A6E7DD27F9EE9F165EE
92A554A48D8F0C96D91820659E3B630AFC7951B306D0CAD505D79711CCE6EEA6
54595FCB8085DFD823DFB318E5353F96660DB25599267C49EEB1BFEF23CB0741
5F54EC8B251AC0928853A4D503ED3AB5F8BA6357112336162FFC5A5453F76C21
C932E818AE4C97D1BC93717A076165BB139948998EBD6AE3E30B5F067D076A3F
3240A2C2FC0F12F8AEDDA00D70A7EBA1F586619FA47D19A0DF863C5ED2E4481B
FF578A1A870D9C3DE99B962016BE1705B09BFC265D3BB6B76329A798E866AA9C
3F06893FFE42B700C71968D6B02328B69D0D42E5C7399E7A5B5E334851268D82
435AA3C82609541E0A13C229CE2C84BBAEF153BF025A952C1415F294DA865B19
B3C49A1F0AF2D9AA1681587A07F2918B95F469EA25AEB9F8017763027BED75D1
EFE64DC80E5D8BA0F0B7F12C2B1013BAFD0ED0B85D7E880B25BE1B6DC0BED700
4C112F2D58D3F07098102078C5909722B6C29F2A121539666B57FD49C9D0D4AE
B6256FADDC3591265562DC9DA6F51A02F3DBA07825FA60C0BFE8033EE250EA09
EE4E9E8B1D70CDBB75968B64E36CCB094780A9A24D85B8201642206044F470A5
E3EBFE151D6C042B97C549456D0C608A005029319BFE85C18713B8E8CEC423E7
07D7EBDAAD00CD7DAA905D92D80AEAC2CF58ECD61F64E024D4D9AE4F58AF20A0
D317F0653CA51B9E51ECB112399DF563FDCD72471D3352065A00715F7827BE62
42F2B13F1C9BCF391D13750AFCABF62998478A8B3E01614A1092E8DFC5D07480
4808C980CFC1657A04B4461D92363F77AE203BB762EB0AD8762ADBE2E88FBE4F
7FB013BEF122247A2540BB1FEF6ADDEF959289351B039BFBEFA780FD18F20A86
FABC4C2E0CA2F764B26B60646575D43F4C06C0DEEC33DB35CA3F2B0766D99D0E
4CB621BD2EEC6E1CEC2E971F6A42046019310A9FC4956B3CBF44024CAD2C0647
CFF9F18A089946B58B514C76D216F3E230A73EC939407466F62D34628F3E211E
642F8F3B518665AA47B5E65236390466D899EE33D933BC088E5BE38BEEEEC59F
5193693A3B16AF8FE88061BD9E2A2E90799828CA50B05465F9AA83CF6FB3AB9F
8967660EF751B41E7C649B0279C036CA46167ECE2D245D29A9A01C47438CCB62
10062CAF9C4188E983C4FC40A51EAAEC70222A18DA4B040FFE156BBA58433CC0
24E095147C082A535376ECFEDF777D09FCA16BF5237CBFE91500194E87F04977
D03C58DD1BC2507AB4CA39BC3BFFD9FF9F88B9C59D06B1F475BFBA9EBEE7478B
F172F0C33F2B20454EF405C926C6DD8ADFF652CCE913904566561C7A486B2C6E
9B35B7297E3BEB745269C7807A0CB53E4329F7178DCD495EA1312537EBB9B369
469757C871A5BA81765F46F271C77BE26368B491D003A003E1674B2EC3C67998
0D9C6E15C3BFF869B51958ACEE8FBFC97397D3A509345F023B177D48626C205E
C3B1CFB40064609ACFBB1F6AACB2CB0ADD2E7A6EE2FCA7825AF486B40666ABEC
A232E6CD68DDA12A44C16BE5D394BF702A04B064A6DBAB5B08461E734281F206
96FCC88254F295F4135984D3CE712801E6F16DE1DC34DBFA972C6D88F31F3558
989B17A3A72248A19E0C66F34F333B62CB292EAC8BC250384D12217E4AA79413
02FF45B2C3C0FE88E14AFB460A6DBD4E4077967BCCDC41038B396AC0DE0A477E
8733DCCE0ED8163AB746B791343187FDA2E64F3205D1C3FE283EDB7C553F2005
114DD3A459A45E0999678BB5C06127953B9B3F5F4E2BC69260CC04BF82B9FC1A
35754DDF5EEDA61E34E590F56C2CACB961C6E051122C70113CE92AC748128B16
8380986879D6314EC530C17142633F0C4E3A5535ED7036D7BEEA096CE49477F7
4B6CB39A093B348DEA00CE0C4995A76C72E7F48746E18A700D69BE6456ED0307
58778EA0439E9FD995613DC8844F6C5204AB295E877A0069F605E6C4CEFF2B68
12023F578A7D31014C7868CE0A513C344654686B53
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (main.dvi)
@start /Fa 134[37 1[55 37 42 23 1[32 1[42 42 4[23 23
42 2[37 1[37 1[42 13[42 1[60 1[60 55 3[37 1[60 4[55 51
51 18[21 46[{ TeXBase1Encoding ReEncodeFont }24 83.022
/NimbusRomNo9L-ReguItal rf /Fb 192[42 63[{
 TeXBase1Encoding ReEncodeFont }1 83.022 /NimbusRomNo9L-Medi
rf /Fc 133[37 42 42 60 42 42 23 32 28 42 42 42 42 65
23 42 23 23 42 42 28 37 42 37 42 37 3[28 1[28 2[60 78
60 60 51 46 55 60 46 60 60 74 51 1[32 28 60 60 46 51
60 55 55 60 5[23 7[42 42 3[21 28 21 2[28 28 28 2[42 33[46
2[{ TeXBase1Encoding ReEncodeFont }62 83.022 /NimbusRomNo9L-Regu
rf /Fd 166[48 2[48 48 41 37 44 2[48 48 59 41 1[26 22
1[48 1[41 1[44 44 48 65[{ TeXBase1Encoding ReEncodeFont }17
66.4176 /NimbusRomNo9L-Regu rf /Fe 133[33 37 37 54 37
37 21 29 25 37 37 37 37 58 21 37 21 21 37 37 25 33 37
33 37 33 9[71 54 1[46 42 3[54 54 1[46 1[29 2[54 2[54
50 15[37 4[19 1[19 41[42 2[{ TeXBase1Encoding ReEncodeFont }41
74.7198 /NimbusRomNo9L-Regu rf /Ff 139[25 29 33 14[33
42 37 31[54 65[{ TeXBase1Encoding ReEncodeFont }7 74.7198
/NimbusRomNo9L-Medi rf /Fg 137[50 50 28 1[33 2[50 50
78 1[50 1[28 50 2[44 2[50 44 18[72 1[61 7[72 11[50 2[50
2[50 50 50 3[25 44[{ TeXBase1Encoding ReEncodeFont }22
99.6264 /NimbusRomNo9L-Regu rf /Fh 136[102 71 71 39 55
47 2[71 71 1[39 1[39 39 71 71 47 63 1[63 1[63 9[133 3[78
2[78 2[125 1[102 1[47 1[102 78 86 102 94 8[39 1[71 1[71
1[71 1[71 71 71 1[35 47 45[{ TeXBase1Encoding ReEncodeFont }37
141.137 /NimbusRomNo9L-Regu rf /Fi 136[144 100 2[78 9[55
100 2[88 1[88 16[133 82[{ TeXBase1Encoding ReEncodeFont }8
199.253 /NimbusRomNo9L-Regu rf /Fj 171[133 84[{
 TeXBase1Encoding ReEncodeFont }1 199.253 /NimbusRomNo9L-Medi
rf /Fk 203[29 29 29 29 49[{ TeXBase1Encoding ReEncodeFont }4
58.1154 /NimbusRomNo9L-Regu rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 461 Tech Reviews)/Subject
(CS 461 Tech Reviews)/Creator (LaTeX with hyperref package)/Author
()/Keywords (CS461``Senior Software Engr Project''Tech Reviews) /DOCINFO
pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
157 -139 a
SDict begin H.S end
 157 -139 a 157 -139 a
SDict begin H.R end
 157 -139 a 157 -139
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 157 -139 a Black 0 TeXcolorgray 3706 -31 a Fk(1)p Black
165 192 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 165 192 a 165 192 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 165 192 a 0 TeXcolorgray
165 192 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 165 192 a 165 192 a
SDict begin [/Count -0/Dest (section.1) cvn/Title (CSV Processing)
/OUT pdfmark end
 165 192 a 165 192 a
SDict begin [/Count -3/Dest (section.2) cvn/Title (Format Parsing)
/OUT pdfmark end
 165
192 a 165 192 a
SDict begin [/Count -0/Dest (subsection.2.1) cvn/Title (JavaScript with jQuery)
/OUT pdfmark end
 165 192 a 165 192 a
SDict begin [/Count -0/Dest (subsection.2.2) cvn/Title (JavaScript without jQuery)
/OUT pdfmark end
 165 192 a 165 192
a
SDict begin [/Count -0/Dest (subsection.2.3) cvn/Title (JSON) /OUT
pdfmark end
 165 192 a 165 192 a
SDict begin [/Count -3/Dest (section.3) cvn/Title (Turning values into system object)
/OUT pdfmark end
 165 192 a 165 192 a
SDict begin [/Count -0/Dest (subsection.3.1) cvn/Title (JavaScript Hierarchy)
/OUT pdfmark end
 165 192 a 165
192 a
SDict begin [/Count -0/Dest (subsection.3.2) cvn/Title (JSON) /OUT
pdfmark end
 165 192 a 165 192 a
SDict begin [/Count -0/Dest (subsection.3.3) cvn/Title (JavaScript Array)
/OUT pdfmark end
 165 192 a 165 192 a
SDict begin [/Count -0/Dest (section.4) cvn/Title (Conclusion) /OUT
pdfmark end
 165 192
a 165 192 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 165 192 a 165 192 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 165 192 a 165 192 a
SDict begin H.S end
 165
192 a 165 192 a
SDict begin 18 H.A end
 165 192 a 165 192 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 165 192 a 0 TeXcolorgray
0 TeXcolorgray 1337 1585 a Fj(T)p Fi(ech)71 b(Re)-5 b(vie)g(ws)835
2189 y Fh(CS461)49 b(-)h(Senior)e(Softw)o(are)h(Engr)g(Project)1090
2497 y(Instructor:)f(D.)i(K)l(e)l(vin)f(McGrath)1178
2746 y(Instructor:)g(Kristen)g(W)-6 b(inters)1675 3054
y(F)n(all)50 b(2018)1624 3583 y Fg(Da)n(vian)34 b(Lukman)1506
3758 y(No)o(v)o(ember)f(15th,)h(2018)1811 4127 y Ff(Abstract)p
0 TeXcolorgray 0 TeXcolorgray 331 4314 a Fe(This)f(document)h(will)e
(talk)h(about)h(our)g(re)n(vie)n(ws)f(of)g(technology)i(or)e(in)g(this)
g(case,)g(language)h(and)g(data)f(structures)331 4438
y(used)g(to)e(bene\002ts)i(our)f(project)g(in)g(CSV)f(processing.)i
(Our)e(project)i(is)e(making)i(a)f(3D)g(visualization)g(of)g(data)g
(with)331 4563 y(W)-6 b(ebGL,)29 b(which)h(requires)g(a)f(data)h(as)g
(an)f(input)h(in)g(CSV)e(\002le.)h(The)g(input)h(of)g(CSV)f(\002les)f
(consist)i(of)g(tw)o(o)g(sections,)331 4687 y(such)e(as)e(format)h
(parsing,)g(then)g(go)h(into)f(system)g(object.)g(This)f(document)i(is)
f(intended)g(to)g(be)g(read)g(by)h(people)f(who)331 4812
y(ha)o(v)o(e)32 b(e)o(xperienced)i(in)e(computer)h(science,)g
(especially)g(reading)g(b)o(uf)n(fer)f(and)g(data)h(structures.)f(The)g
(conclusion)i(of)p 0 TeXcolorgray 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
157 -139 a
SDict begin H.S end
 157 -139 a 157 -139 a
SDict begin H.R end
 157 -139 a 157 -139
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 157 -139 a 0 TeXcolorgray 0 TeXcolorgray 3706 -31 a
Fk(2)p 0 TeXcolorgray 331 292 a Fe(this)23 b(document)j(is)d(that)g
(input)h(can)h(be)f(done)g(preferably)h(using)f(JSON,)f(similar)g(as)g
(system)h(object)g(can)g(be)g(done)h(with)331 416 y(JSON.)165
574 y
SDict begin H.S end
 165 574 a 165 574 a
SDict begin 18 H.A end
 165 574 a 165 574 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 165 574
a 1579 723 a Fc(I)t(.)45 b(C)t(S)t(V)26 b(P)t Fd(R)q(O)t(C)t(E)t(S)t(S)
t(I)t(N)t(G)248 898 y Fc(Before)21 b(going)g(on)h(further)m(,)d(the)j
(requirement)e(of)i(the)g(project)f(must)h(be)f(e)o(xplained.)f(Our)i
(project)f(will)h(implemented)165 1048 y(using)27 b(W)-7
b(ebGL[)p Fb(?)o Fc(],)28 b(a)g(Ja)n(v)n(aScript)g(API)g(to)g(render)f
(interacti)n(v)o(e)f(3D)i(graphics;)f(therefore,)f(the)i(language)e
(appropriate)165 1197 y(for)32 b(this)h(are)g(HTML)f(for)g(page)g(and)g
(background,)d(and)k(Ja)n(v)n(aScript)f(to)h(e)o(x)o(ecute)e(shaders.)h
(The)g(CSV)i(\002le)f(that)g(we)165 1347 y(got)e(is)h(in)g(form)e(of)h
(Excel)g(spreadsheet.)f(This)i(could)e(be)h(formatted)f(into)h(comma)f
(separated)h(\002le)h(or)f(JSON)h(using)165 1496 y(CSV)e(con)m(v)o
(erter)c(found)g(online)i(if)h(necessary)-5 b(.)165 1646
y(CSV)27 b(Processing)d(in)i(general)f(in)m(v)n(olv)o(es)f(tw)o(o)i
(separate)f(w)o(ork,)g(such)g(as)h(parsing)f(the)g(data)h(and)f
(turning)f(the)h(data)h(into)165 1795 y(system)31 b(object.)f(Both)h
(can)g(be)g(done)f(in)h(man)o(y)f(w)o(ays)h(for)g(this)g(project)f(to)i
(be)f(w)o(orking;)e(ho)n(we)n(v)o(er)m(,)g(not)h(e)n(v)o(erything)165
1944 y(can)c(be)f(ef)n(\002cient)h(when)f(applied.)g(This)h(document)e
(will)i(re)n(vie)n(w)g(possible)f(technologies)f(or)i(data)g
(structures)f(for)g(this)165 2094 y(project)g(as)i(a)f(discussion)f(to)
h(decide)f(which)h(method)e(is)j(the)f(most)g(ef)n(\002cient)f(in)h
(time)g(and)f(memory)f(of)i(our)f(program.)165 2243 y(TThere)36
b(are)h(three)f(w)o(ays)i(to)f(format)f(parsing)f(a)j(CSV)g(le,)f
(which)g(can)f(be)h(done)f(with)h(Ja)n(v)n(aScript)g(with)g(jQuery)-5
b(,)165 2393 y(Ja)n(v)n(aScript)32 b(without)g(jQuery)-5
b(,)30 b(and)i(JSON.)h(Furthermore,)d(there)h(are)h(also)h(three)f(w)o
(ays)g(to)h(turn)e(them)h(into)g(system)165 2542 y(object,)c(such)g(as)
h(Ja)n(v)n(aScript)f(Hierarchy)-5 b(,)26 b(JSON,)j(and)f(Array)-5
b(.)165 2672 y
SDict begin H.S end
 165 2672 a 165 2672 a
SDict begin 18 H.A end
 165 2672 a 165 2672
a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 165 2672 a 1567 2804 a Fc(I)t(I)t(.)45 b(F)t Fd(O)t(R)t(M)t(A)m(T)25
b Fc(P)m Fd(A)t(R)t(S)t(I)t(N)t(G)248 2979 y Fc(Inputting)19
b(CSV)k(\002le)f(can)f(be)g(done)g(in)g(so)h(man)o(y)e(w)o(ays;)i
(therefore,)e(limiting)h(numbers)e(of)j(w)o(ay)f(based)g(on)g(ef)n
(\002cienc)o(y)165 3129 y(and)28 b(simplicity)h(for)g(our)f(project)g
(is)i(required)d(for)i(future)e(planning.)g(Belo)n(w)j(is)g(the)f(list)
h(of)e(suggestion)g(for)h(parsing)165 3278 y(a)g(CSV)g(\002le)h(using)e
(Ja)n(v)n(aScript.)165 3427 y
SDict begin H.S end
 165 3427 a 165 3427 a
SDict begin 18 H.A end
 165
3427 a 165 3427 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.1) cvn /DEST pdfmark
end
 165 3427 a 131 x Fa(A.)41 b(J)m(avaScript)27
b(with)i(jQuery)248 3734 y Fc(Data)c(parsing)f(can)g(be)h(with)f(Ja)n
(v)n(aScript)h(jQuery-CSV[)p Fb(?)n Fc(],)f(called)h($.csv)-5
b(.toObject\(\002lename\).)20 b(This)25 b(function)e(will)165
3883 y(also)32 b(automatically)f(map)g(the)h(input)f(as)i(system)f
(object,)f(which)g(is)i(really)f(nice)f(because)h(the)g(function)e
(does)h(both)165 4033 y(format)c(parsing)f(and)h(turning)f(them)h(into)
h(system)f(object)h(with)f(simultaneously)-5 b(.)26 b(It)i(is)g(also)g
(possible)f(to)h(open)f(local)165 4182 y(\002les)39 b(without)f
(notifying)e(request)h(to)h(the)h(serv)o(er;)e(ho)n(we)n(v)o(er)m(,)f
(the)i(are)g(do)n(wnside)f(from)g(using)g(jQuery)-5 b(.)37
b(The)h(\002rst)165 4332 y(problem)29 b(with)j(using)e(jQuery)h(is)h
(that)f(it)h(is)g(dif)n(\002cult)f(to)g(set)h(up)f(because)f(it)i
(requires)e(addition)g(\002le)i(to)f(Ja)n(v)n(aScript.)165
4481 y(Another)26 b(problem)g(with)i(jQuery)e(is)j(that)f(the)f
(functionality)f(is)i(ne)n(w;)f(therefore,)f(not)h(all)h(bro)n(wsers)f
(can)g(support)g(the)165 4631 y(use)i(of)f(it.)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
157 -139 a
SDict begin H.S end
 157 -139 a 157 -139 a
SDict begin H.R end
 157 -139 a 157 -139
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 157 -139 a 0 TeXcolorgray 0 TeXcolorgray 3706 -31 a
Fk(3)p 0 TeXcolorgray 165 192 a
SDict begin H.S end
 165 192 a 165 192 a
SDict begin 18 H.A end
 165
192 a 165 192 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.2) cvn /DEST pdfmark
end
 165 192 a 100 x Fa(B.)41 b(J)m(avaScript)27
b(without)h(jQuery)248 464 y Fc(On)j(the)h(other)e(hand,)g(Ja)n(v)n
(aScript)h(can)g(also)h(do)f(data)g(parsing)f(without)g(the)i(help)f
(of)g(jQuery)f(with)h(FileReader\(\))165 614 y(function.)24
b(W)m(ithout)i(the)g(help)f(of)h(jQuery)-5 b(,)25 b(mo)o(ving)f(the)i
(data)g(into)g(system)g(object)g(has)g(to)g(be)g(done)f(manually)g
(within)165 763 y(the)31 b(Ja)n(v)n(aScript.)g(The)h(code)e(is)j
(simple,)e(yet)g(still)i(ef)n(\002cient)e(to)h(the)f(program.)e(Unlik)o
(e)i(the)h(jQuery)e(that)i(could)e(only)165 913 y(con)m(v)o(ert)37
b(CSV)k(\002le)f(to)g(arrays)e(or)h(map.)g(The)g(de)n(v)o(eloper)e(can)
i(use)h(this)g(method)e(to)i(freely)e(choose)h(which)g(data)165
1062 y(structures)d(could)g(go)h(along)f(with)h(the)g(data,)f(in)i
(this)f(case)g(will)h(be)f(e)o(xplained)e(in)i(the)g(third)f(section.)h
(The)f(only)165 1212 y(do)n(wnside)24 b(from)g(using)h(this)h(method)e
(is)i(that)g(it)g(needs)f(more)f(con\002guration)f(as)j(it)g(is)g(not)f
(automatically)f(parsed)h(into)165 1361 y(system)k(object.)165
1469 y
SDict begin H.S end
 165 1469 a 165 1469 a
SDict begin 18 H.A end
 165 1469 a 165 1469 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.2.3) cvn /DEST pdfmark
end
 165
1469 a 129 x Fa(C.)42 b(JSON)248 1770 y Fc(JSON)34 b(is)g(another)d
(option)h(that)h(could)f(be)h(use)g(to)g(parse)f(a)i(data)f(into)f
(system)h(object.)f(The)h(JSON)h(requires)e(an)165 1920
y(additional)37 b(\002le)j(to)e(be)h(read)f(similar)h(as)g(CSV)h
(\002le;)g(therefore,)c(the)j(users)g(need)f(to)h(use)f(CSV)i(con)m(v)o
(erter)c(found)165 2069 y(online)g(or)g(made)g(by)g(us)g(if)h
(necessary)f(to)g(con)m(v)o(ert)f(CSV)i(to)g(JSON)g(\002le.)g(JSON)g
(can)g(be)f(read)g(using)g(Ja)n(v)n(aScript)165 2219
y(by)e(mentioning)f(the)h(json)h(\002le)g(names)g(and)f(the)h(Ja)n(v)n
(aScript)f(source)g(name.)g(Then,)f(the)i(data)g(can)f(be)h(parsed)f
(into)165 2368 y(the)29 b(object.)e(Using)i(JSON)g(will)g(allo)n(w)g
(the)f(de)n(v)o(eloper)e(to)j(freely)f(choose)f(the)i(data)f
(structures)g(appropriate)e(for)i(this)165 2518 y(project.)f
(Furthermore,)f(there)i(are)h(tw)o(o)f(w)o(ays)h(of)f(using)g(JSON[)p
Fb(?)p Fc(].)248 2667 y(The)g(\002rst)i(w)o(ay)e(to)h(use)g(JSON)g(is)h
(creating)d(a)i(Ja)n(v)n(aScript)g(object)f(in)g(a)h(separate)g
(\002le.)g(This)f(actually)g(not)h(ho)n(w)f(the)165 2817
y(real)g(JSON)h(w)o(orks)f(because)g(this)g(is)i(only)d(a)i(Ja)n(v)n
(aScript)e(object.)h(Ho)n(we)n(v)o(er)m(,)e(the)i(method)f(of)h
(parsing)f(this)i(data)f(into)165 2966 y(the)34 b(system)g(object)f(is)
i(simple)f(as)g(calling)g(a)g(function)e(JSON.parse\(\).)h(On)h(the)g
(other)f(hand,)f(the)i(second)f(w)o(ay)h(of)165 3115
y(using)c(JSON)i(is)f(with)g(jQuery)f($.getJSON\(\))f(and)h(creating)g
(a)h(ne)n(w)f(XMLHttpRequest.)g(The)g(second)g(method)f(can)165
3265 y(be)d(done)f(synchronously)e(or)j(asynchronously)-5
b(.)22 b(It)k(requires)f(tw)o(o)i(functions)d(to)j(load)e(the)h(JSON)h
(and)f(parse)g(the)g(data.)165 3414 y(Using)i(this)h(method)f(is)h
(suitable)f(to)h(achie)n(v)o(e)e(ef)n(\002cienc)o(y)g(in)i(coding.)165
3503 y
SDict begin H.S end
 165 3503 a 165 3503 a
SDict begin 18 H.A end
 165 3503 a 165 3503 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 165
3503 a 1158 3632 a Fc(I)t(I)t(I)t(.)44 b(T)t Fd(U)t(R)t(N)t(I)t(N)t(G)
26 b(V)-5 b(A)t(L)t(U)t(E)t(S)24 b(I)t(N)t(T)s(O)h(S)t(Y)t(S)t(T)t(E)t
(M)f(O)t(B)t(J)t(E)t(C)t(T)248 3805 y Fc(The)i(data)g(that)g(we)g(ha)n
(v)o(e)g(from)f(parsing)g(a)h(CSV)h(\002le)g(can)f(be)f(processed)g(by)
h(using)g(Hierarchy)-5 b(,)23 b(array)-5 b(,)24 b(and)i(JSON,)165
3954 y(assuming)21 b(CSV)i(data)f(from)e(parsing)h(does)h(not)f
(automatically)f(map)i(the)g(data)f(into)h(a)g(system)g(object.)f(An)h
(appropriate)165 4104 y(system)34 b(object)e(is)j(needed)d(to)h(better)
g(match)g(3D)g(visualization)g(demonstration)e(and)h(relationship)g
(between)h(data.)165 4253 y(Belo)n(w)c(are)f(list)i(of)e(suitable)g
(data)h(structures)f(suggestion)f(to)h(be)h(used)f(for)g(this)h
(project.)165 4361 y
SDict begin H.S end
 165 4361 a 165 4361 a
SDict begin 18 H.A end
 165 4361 a
165 4361 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.1) cvn /DEST pdfmark
end
 165 4361 a 129 x Fa(A.)41 b(J)m(avaScript)27
b(Hier)o(ar)m(c)o(hy)248 4663 y Fc(The)34 b(concepts)g(of)h(hierarchy[)
p Fb(?)l Fc(])g(are)f(suitable)h(to)g(be)f(used)h(in)g(our)e(project)h
(simply)h(because)f(our)f(project)h(also)165 4812 y(using)d
(inheritance)g(from)g(IOC)h(\(Indicator)e(of)i(Compromises\))e(to)i
(other)f(properties,)g(such)g(as)i(sections,)f(and)f(area.)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
157 -139 a
SDict begin H.S end
 157 -139 a 157 -139 a
SDict begin H.R end
 157 -139 a 157 -139
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 157 -139 a 0 TeXcolorgray 0 TeXcolorgray 3706 -31 a
Fk(4)p 0 TeXcolorgray 165 292 a Fc(The)26 b(use)g(of)f(hierarchy)f
(also)i(bene\002ts)g(the)g(3D)g(visualization)f(that)h(lets)h(the)f
(users)g(kno)n(w)f(the)h(relation)f(between)g(each)165
441 y(v)n(alues)33 b(or)h(properties.)e(The)h(data)h(structures)f(can)h
(be)f(easily)h(set)h(up)e(by)h(gi)n(ving)e(property)g(to)i(each)f(v)n
(alues)h(in)g(the)165 591 y(CSV)g(\002les.)f(Moreo)o(v)o(er)m(,)d(the)i
(data)h(can)f(be)h(change)e(inside)h(the)h(hierarchy)d(as)k(well)f(if)g
(a)g(data)f(from)g(CSV)i(changes)165 740 y(o)o(v)o(er)27
b(time.)165 872 y
SDict begin H.S end
 165 872 a 165 872 a
SDict begin 18 H.A end
 165 872 a 165 872
a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.2) cvn /DEST pdfmark
end
 165 872 a 148 x Fa(B.)41 b(JSON)248 1196 y Fc(According)24
b(to)i(the)g(JSON)h(webpage[)p Fb(?)m Fc(],)f(the)g(JSON)h(is)g(b)n
(uilt)f(on)g(tw)o(o)g(structures,)f(which)h(are)g(collection)f(of)g(v)n
(alue)165 1345 y(pairs)34 b(\(struct,)g(object\),)g(and)g(ordered)e
(list)k(of)e(v)n(alues)g(\(array)-5 b(,)33 b(list\).)i(Similar)f(to)h
(hierarchy)-5 b(,)31 b(the)k(concept)e(of)h(using)165
1495 y(JSON)j(as)g(an)f(object)f(is)i(suitable)f(to)g(be)g(used)g(in)g
(our)g(project.)f(As)h(for)g(the)g(code)f(perspecti)n(v)o(e,)f(JSON)j
(is)g(pretty)165 1644 y(simple,)31 b(easy)g(to)h(understand,)d(and)h
(easy)i(to)f(use.)g(The)g(only)f(dif)n(ference)g(with)h(hierarchy)e
(being)h(only)h(in)g(the)g(code)165 1794 y(and)g(function)g(itself.)h
(Similar)g(to)g(Hierarchy)-5 b(,)29 b(the)j(de)n(v)o(eloper)e(can)h
(also)h(modify)f(the)h(v)n(alues)f(if)h(there)g(are)g(changes)165
1943 y(o)o(v)o(er)27 b(time)i(as)g(part)f(of)g(user)h(interaction.)165
2092 y
SDict begin H.S end
 165 2092 a 165 2092 a
SDict begin 18 H.A end
 165 2092 a 165 2092 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.3) cvn /DEST pdfmark
end
 165
2092 a 131 x Fa(C.)42 b(J)m(avaScript)27 b(Arr)o(ay)248
2399 y Fc(T)l(urning)d(CSV)i(data)f(into)g(arrays)f(is)j(the)e(last)h
(thing)e(to)i(do)e(when)h(using)g(Ja)n(v)n(aScript)g(because)f(it)i(is)
g(not)f(as)h(ef)n(\002cient)165 2548 y(as)36 b(others.)f(Using)h(array)
f(to)h(represent)f(data)g(is)i(doable;)e(ho)n(we)n(v)o(er)m(,)e(the)j
(results)g(w)o(ould)f(look)g(more)g(lik)o(e)h(a)g(table,)165
2698 y(which)29 b(is)h(not)f(what)g(we)h(w)o(anted.)e(Ho)n(we)n(v)o(er)
m(,)f(using)i(array)f(can)h(become)f(necessary)h(if)g(needed.)f(There)g
(are)h(also)h(no)165 2847 y(2D)g(arrays)f(in)g(Ja)n(v)n(aScript;)h(b)n
(ut)f(array)g(within)g(array)g(can)h(be)f(set)h(up)g(to)f(create)h(a)g
(matrix.)e(This)i(is)h(the)e(last)i(priority)165 2996
y(of)d(data)h(structures)e(that)i(w)o(ould)f(be)g(used)g(in)h(the)g
(project)e(because)h(of)g(inef)n(\002cienc)o(y)f(of)h(the)h(object.)165
3127 y
SDict begin H.S end
 165 3127 a 165 3127 a
SDict begin 18 H.A end
 165 3127 a 165 3127 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 165
3127 a 1636 3258 a Fc(I)t(V)-7 b(.)46 b(C)t Fd(O)t(N)t(C)t(L)t(U)t(S)t
(I)t(O)t(N)248 3434 y Fc(The)28 b(conclusion)f(for)h(this)h(tech)f(re)n
(vie)n(w)g(is)h(not)f(\002nal)h(since)g(further)e(discussion)h(is)h
(needed)e(with)i(the)f(clients)h(and)165 3583 y(other)36
b(team)h(members;)g(ho)n(we)n(v)o(er)m(,)d(from)i(one')-5
b(s)37 b(perspecti)n(v)o(e,)e(one)i(can)g(say)g(that)g(JSON)h(with)g
(Ja)n(v)n(aScript)e(is)j(the)165 3732 y(most)29 b(suitable)g(language)f
(to)h(be)g(implemented)e(for)i(this)g(project)g(in)g(term)g(of)g(CSV)h
(processing)e(for)g(simplicity)h(and)165 3882 y(ef)n(\002cienc)o(y)k
(reasons.)g(The)h(later)g(follo)n(wed)f(by)h(Ja)n(v)n(aScript)g
(without)f(jQuery)h(for)f(format)g(parsing,)g(and)h(Ja)n(v)n(aScript)
165 4031 y(hierarchy)26 b(for)i(turning)f(data)h(into)h(system)f
(object.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
