%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Thu Oct 11 16:02:05 2018
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-Medi
%%+ NimbusRomNo9L-ReguItal
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -t letter main.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.10.11:1602
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 755 2013-03-09 08:48:58Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.15, 2012/10/18
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 

  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 707 2012-09-21 14:17:30Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.14, 2012/09/18.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
 /startGlobal { true setglobal globaldict begin } bind def
 /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E93CDED901EE8B566E969C0D0
EC80D172940BA3ECFA1C2AD06186907A91B3C71C70AD476F8D6E6EC6D1476CA9
9DDEBB0897B97D21ADAEC5AC1FA34CEF83450F3CF96B23EFDB0B46E25392CD6F
43D5C842F87B6D8F433F9402B18339DEE85CE619109DC5B0A512D05CF9D7D567
453EFAC6B42EA67174348066E173C5D0B04A7DA04505AE8A67CD805EC55122BB
58CD67DDE0217905ED118A54FCEFBD129D6310995B58DF6D920A30C805741994
1A114E40863B737B002A6CA958B8C2397A96B4924A0C7D7AF0112FF1A1DFDCAE
E8B1B75A2BBF37F423BC88E6BDD06F2AF61301FD6091FDF2C662612531A23666
64EE40299590BDDE05228EC140AFB5D7E24E2B18FA0D5A7BAAB82D3297C9CEDC
20F9601CA9FEAAD87981D6DA72961783F252E49C5574786F45DE88FBF2D6B94F
12E4EA3A9BDB285BED832B3D6CCE7DA625F13D9C504668753AA079E9B24F0C3B
5C930C245C7C4B18D30A7046A27AA007D54F2A1B2596FBFA1E5C6668641E4C15
421F6D812255D98D2E89EE3BB7AB14D465CB0E4F622144E415EA54E08AF5899F
D8E30152DD5AF9200F8AC8B8FA39413858E8AAD7831B58CDCD3666FA965479B2
A5F85AFA549BEE2E8B72DEC59D297CC24DB89EC76930D071A679EDCE7A30FD98
2D182E86B3CB63C968430895741B98CC3150361B8901E76B80E3B89A01CFB003
D77233A407AEB2B43C524664AE0AB89DF0865E14A2374BC9C5097DA8A9EAC525
6F54531F9515FA7A9458A630D71D56B733A086394C076F82EC251D595E4EE9F9
BE26A986206B75F6E1151D7A6D811C66C3EE048CB2DB05D0E50A525C31CED2F8
389F5004865EE88ED4DE986F6029A4C0BCA95791D20C323193B70D462E6527E6
C2214EE691177F70C00E3CCA1E36E5111D74ECE14CE6896ED7628FCFC441C30F
108F0159505E014A35C21FCB5478A1CEE42E144601E47E3C44EF2B9C5ECE1915
13362AD091F6FFAAB185DDF759DC26288A27F32BBBB4087D2B948DED6C44828F
BFBF98843FD61AAC4452EE1E999CC3901A7FB96C757689A5935BEEA90CCB0F65
8995029D088B980C1BFE78F9D07C79345CAA69F4DB314DC2EEAC844E3320EE6F
8E895A70F5E23C13FDF9A7724A5FE71F2D7C6A9106D0E42E184317DF4428A4E3
D4A3C29F9EAB7F88C96F904A61C147BE8A77CFC638E18403A6E9FF8767233017
9114653F3E146573CB07E954A869F1BB6FED5048613BF39CA8CB9113D9FCD0CD
3CD5E120D17FE4D1553265DB5FBCC07B1ED23BF5A2D925263F0642D7F9D0C274
AAC6D549981CD8A5A23F0BE5153792894E2EC1D323677E92AEEC7F87B974227E
87E49BF062A0768D650B6AACA3735000E477AECFF9C99670502B08373AEC3A5B
F90CC47BA7E64C532EAF889F14897C9DEDC7FA6A9A458600D94973E8E9C2ED99
9BF8DA8733528484627F19006CC52D9E451DC21450FD3DBB18715AF08012F764
626BEBF9362E25D22A9C6ACE18C3988C8D4266D86BBC45F71A9A9CDE4364CD69
D506E7D3C910F800C2E8D8E14D1017DC8428791C900E377B78459949C4DD42F3
FA8B503B2DD2AA86D78D85F6692F09886CC93285487121FB3EBFE72A4B9268E1
F3D065E8BCD48586B1A9581F46C913E16E321F84922EABCCEFCD80B0B9E961FE
9FCCF0B1836A57B85AA91E0D4F0B202C3F52D34947E066CA91301C544758A81A
25AED5D79A98755749F29BA98FFADEBFA5B25065E9237FE28477792C02023BAF
7F7FED07820AE166FD860A5F9FE418CE813C459FF3E316D446C4ACF2856A28A9
EA7417233323C36231657FE4537E7864C17F28F00AD3B7166AD946924626EB9C
E7E0ED841A9D37A81ECA6295C2BEB135C67D042F4A89D7EB82B1B220FCD19436
C60A8C9DCE535CE837C22D31DBE92073F1C364F482F3B6D8835B8759FC45A818
F41A007E66352FA13410F099C9F176D1889AE87863AE7E6356EB0F2C493EB45A
04C1B0E91F6FA41AD8915A1426E29222A23355BC0FF2E090254FD1C4F77AF14B
AA3B4590D5B0C8F3317BA382A902F008AB5B92AC6BF1104B2CC456431852648F
9D3A71EA6CD16BF2351BE1A662509515B1FDC4995AD8DF4C21DAD096ED5C7CA3
443F80A0436B0E3A44D63B8FE391030C5245F65B42EEA673F31E8E07AEDC73F2
B8835BE089E9D3E6301F8D9A00FFA3C7DF99FD8A37EFDA8ABCA4945E742D741E
0211D42BA31EC841C64A28FA3084DF1A69D83BB4AFC70FB44C35B55A46D41A84
DC4982F6CDBB4009533FE4FA4373F544B613C48DE318AB14D8B568748A753282
4483953DB5DE18BFEA1A418BFABBE09F83C0CB6C14E547EAE918096F5A421973
98DCAD093A32719381936CB07265D69E7127AC4128988F493604E1BC8DCE9922
5BC7F4F074AB70369ABE28B7078F57A4D6313458E50D021035D81B3610784B48
15B8CF7331184791CBFB5F581A6F22C6AD5BEB9EDE6D2C0C089EA490D7AC6380
D9B603EF13B28C716B660158F64F1A97556C0ACD8EA7546B2091FB0F74E34F73
B119BE0CBCB087ADD6D28172A3985247F0D8C276ABB12EA159D581CB96D5E295
5DE12558C396076B430AD13990FFCDB3858E05B01F69877EC2E790D0E6395538
CCCED1CDAFF5DC48A541A87918102F201C3012F4250288C6004F65A5C88E5142
B28E5A8E27E7C92DA0EF7A3F89613E5C84BD555027B61769399350687A88D5AC
3730DC9A3A258265817CC2B75F89242F7301B28368C344FDB61FC1C388368572
955C968F61E4412E533ACE36D1A2BB59929909F5CE6D50AFEEB24FE7F36ED2F1
EACB243DDB6C5673A5BD6D0F4E825C7AAC3976F001175363425C4CABE113B257
128A84987EF1487F54EB23A1CE0AB8CB768EDF04DBF511A28BEB59E5E1B9022D
2E4700F5F4896B8AFA47B40437DE16BA311C9236501F2717DDAB52753B367056
55ABE435173259F6F0DA988C6FF0991E0A2B541811819A017C4A249C4B1B0A47
FD3FCF19BAB43710DB33F0AF507141B55B684C5858C10A4A07F7F8401D3BE08A
AFE98B384D8CB1A19D5CD6919ADF2E9932447CB6F138FF4C390A2E82F4D97784
BCD075E54C20DADC7BB06DA228963921E9DE227DDF0F679CB910BF0C518E7A0E
D59D1FD8F749BB3699F521C4256A7CECA22D415F5C67951A8EEA96DC7D077BBA
51671FD9AAEA46B7FBAD4B8B70A2F761B32973A424834A45710D3B8C19BB096A
1FDF2A79B192D9DEA8EE410C58BD7B7EC01C1E8A68F5577261296E558E92A265
55D93BE3AAC54DA70881C6EA99E837D718CDE9782D5FF5292EC0EB16CD86A465
83FD01AB1744BB2C04072851D8582991793EEF1E0F73C52C42AEC6A3F27E9FA3
FE43ABC96FD578ED24E3C41A66FD398A0EF88BCD46EAE68E1B9522911D17610F
5D7F76C200118FFB0C8BB5E7D0A50B33234AF28E55765856F9C24453D4CC2C65
CA76AFDBB19363D152800AF844B9D4D8FDC7B5E92735B8A7D7C32900BD6D133F
E50034DCB8E19DF70136DE44D1DD09564171711FDD0544554D52B292A3BE7042
F6E114D4FAA550748871D0640D0ACC033AE2C6EC159ADDFC618B2B1B07AAA805
30FBE74A63673E18DA351D468B6210AA1D6C506595DC7D0BC1CEC80E8C41858C
1CD37D4D9BB81E7E8FF35B28D07BE7DDAC6A15727CE914A6080298CCE353FB17
85CF9CB60AE6D2D25EFEF3AAF969A405038AD67C51E521A29AB9FF0731B61045
F4B53D2B14FD50B44E5F88DE90EB9AC15E0C998A1FA8F127658F8C03E716C3DC
82993751B782B81318867DC39FAB633804477BCE10E6E084D6A81DB718A159DB
D4C86A6AAC425BBBBE42BA426F873A20C2998EFFE43506685303BDDE3A16D427
91B95B3FC00E62CBFF4209A093AB90E605E96825738C4E8F6AF0FC76BC1B1FD4
20957905FA6172F75BC7865A4B326BB19FEE02D4F50615AC4FF3F906E9D890A8
25711FD053FF0F727EE7A62C4A4C0C8D10A93430C7FCB6EF5F92D80AEAC2CF58
EC01BD61D7CB962C4EA67B639A73A26C5E0137C208DCF1A7143359F8EE27AB1B
E08B7CBDA7CB79240357C0AF60E817427A9126A9C14E24925F77AB14169547EE
DFEFB6F03C7D5365CEF3B120A30ECD347E1717AA5D4CB03B26C4A34300BFE8B1
9A32B3DD2B06D394E6C71B572542E0ACBEBFF0A992B4B0A63597D1BCA0C4BAA2
BB8528C34C369BA3D1C1F5EDC5275EC13567DC75F71C7B290BFCF9BAAB9033F3
CE97AD7469C7629574F2B28755B605ABC9B660581DCD72E6964B1C9BD22D7379
5BA572B6ECBA85BAD11E560633A8D84EEADFDA2C26C9018095B1DB317AF64FF6
5B5946D3CB97E342F78AFDC61BA7798C5F4DAEC9CBA16B92C83DB0D7310570B2
AA170791FD4069D0807225AC906E3B364A386C3ADCD175ECA2FC62EADAB87D29
8A722C11440F024431328DE7BED3EFA92ECD09AE758C9286996885B88B6CE474
4BEF4A9A8B2225454AA8498C7A5B2F9064A8227F615C5FE89BB13956D6B5BB35
08E48561C1B7FF8DADBD4C04CA5B05BE72A868EEFB3FFC2426E482EB3BD7E762
609D77386EE410376AF00F6D53B0F187F1B6B08B27B0B2EFFC490E9D89A85DE9
72D09BB679BFE720445472C2D7E6D1EF47EA77C2CF4D8512791EEDAB494054C8
28121C82C20A8C9A230B7176C66ADAB4091F5C7D43FEDDEB44FBFE435F92E8B8
36B6631AD7623A9AEAD25386AB426208A50CED42CA18FAEC2921BAFBD8687C4F
810F4EFBAAF7E6EC0FE7EF2DF8E4523812293ACACFD6DE95DCD9B3C553914977
534D0E466F1FB5EF678E92F2BECE388E84696DDD8D3DB70C51870D9ADD147E7E
9A41383D1E6376231203840F037B4146F2BAB25A95E1B0429A0F9DC0C10A6281
21B6317FB8E40E11E48E61DC6DB3FD9118D175C429AABA86C5E24DD1A399C717
85CB889E27FAA9EB8D2DA4B491536CEF9D1E9F4FD8C0003E6F2321AEB7FFAD8D
5DB44108662E33BD80F37982E9728798F378BFDFAE49D3FE7B47F0B4C5BE3629
7E9DA5DB60EFD3EAC896C9E50A85C1E620574519E6223753B1644F9CD79E6739
4AEC64377457821CDB3B15AA06EF3764747802005BB170E5B4717B42CC855192
F77048A53C71DF4725B4AAE22A971E9E5544B2F519FB38556207D1E5D514F964
C2E06C29DE2F9175D71475D388051FB94858823C2E721E0DB97368BE9BFB6005
AC0A20E4A188759B802140759EEE688D4A128B1DF2EBEE1E09D4E980D922DF14
37906A0FFAC7846EC5EB370B7F2C280450AE5DD7AB3CE97AE2F4DB617D8A9115
44C74DAC6FBAD49F65ABFCEA31470C8ADEAFA7D3E1A718C7B443CEDC6DF4438E
BFA8AE22D921EA11FCF3C1F6306C9BDA243886569A8ABA5219A3505C5FBDD78E
6105AA8ACEF1DA1B44DA42B910613FF57B6C34FF616E38BABF2984FFA332B3D4
33EC911AD75547F61F66F43106A015B4BECF94937CE559E9B625FB2AC1875835
9E92F6E5F49819178A985CF7B2A8AEC5AB3ECF748EB0D26D527A76EFA447E708
8CC925B30ABF91660BA909B6902FAA04FBA739DCC06AB37095FE6164E161D3E7
36F84F25C7B5C68E1EAB35F46B8119F996C9A1DDCA5882A2BF502635B1419656
59F746733591723C174EBDFB4944E06B9AFAC13722FA0F50108F6C65683BE096
40544918E24A9620E486E938886B4588E70F99271A80C8836748E8411EB545FB
F9DEB5A650F37D9B63D84854C3369974DAA2FEE463F66521B7FCE4B248333E36
7DE3FFCEFE1D9D56A1660DAE90B755958197A3351735D5506F9AF778B4A8AC4B
74D356F94193EE7169D5E1060B69B0DA786F929BFAF65B9F83F673D723368370
173DD883F4227102CF7D568052277ED828516520C72152058098545930CD76C9
72015D66F5D49756FD7467F21C1CEC6A0B364B8C1620A990DB98DF568ABC94D1
A5E6B3CF0D1FD65BDDE295372C8D970E0708A641609FF9916C9B2BD5FFA777E1
B43418E5EC5273FA305B0F873F46659DF1BE6B370A4759C550CAE32EF361078A
9CB36CDFE0F56146DB8A861E46E024CE43B57760D64DEE11C94AB03CA1FBABC9
20B18997104DBBE236DD792835ACA81E9363BF2DC0FA60561AB69D6DADD52E17
73E48CC9BAE67807C7BBABBE34548BA12DF21EC535145F1517D6ECB55DA14D30
F2C102EF50ADCA11FCCCDB6ACCA71FB694B97C13B0F47B279C6F9121B69685F2
4A1C153805633C3F96ECC3CB5E9634FA67D28073234613372C6F6207140CD1C5
E1F78F48805D6A8AD6E8DA1680A38D27F07A978869C4C6113759A7DAAF52954F
5A4FB08F19CA5E6579D84080D4AE7E4534D99F63F703158342FAC5A05D11A05F
39FA485D023B0C7BCB83442FFACC86FEDCE5BC78953793F8743B8E8D8EE3B23B
19927F63ECE09491CD27C7134E0A7E45DD883BD8267598526334771F3A807ACF
F8EAFAD45F67403971DD61EADBD8CFDAA154996A65A1606C0E1387DD54F5C8BD
071C4E9A7213D548E83258BA5211AF692F13ADA5048B28F82A72A4F593269D79
52B93A2A83A34F026C39DE19590722434E96C61F2DFE4D5CC6EE8458FE220205
67407BD1DFAFFDC16ACC0184697DF96CB3C767D7D6063025F9DC797C0E588CCC
27A459D951427D92E07839518EEB647FFAB52A0B997981E44D29F2BAD66891F4
0F2407CD5A117FBDDE4BE05B7127DC85BC6194F40580AE512771AA789A506098
24588ED01FCAF8DDC84CB6F2C3D5D774D4F95B5C0BAE2F3534E41B8A3435BB75
5768F7A33721F57F39424767F0235C95F27DB91B1104A6022B1ABEB0F665C494
0278705A4426BCDFF0A602548610BF218770EC401463F44D4AE5978DD2AB39FE
CCD3707A8D123D9785B5541278930EC4314697E804E3D62EF2254186347120B5
2D1DEA4A27E3361593E15F917FFC216A13755AA32928A75ED71A655B79079EFB
568ABD139FFAD9AE233C0451B15B177A349D14B7DB05DDBC14E325FA923D7235
959A3EB75E31431F56D012D07D5C057D8323396A64D3A72E40C0F8193944989F
D7F4B9E32626BE26C07D11034652C9035D053D57F72E3DFF8667474A3B29AB81
362A205B7452363B29B6E65999F261955E46D12CE27882B0D6E75FAF1F0EA49B
F15B2B3893392706C9CE7C62913054F9FABFDD9A08823E4FE32710DB207BA6FC
9E1D060CAB8A06F6E369D352439DA4F139B1CE101D66F5A379CAA95E1C08724A
B27864B4ED64CD18471A4924203958C44EE0367F731C703092EDDB6837486B09
4485C5BEA56847AF4A494B69BB9EE464E1276D5D96FB9065109645C2761AA8E2
E516DF23489557A43E2B26C7D92947185D9EFCAA780B54FBB8BB2CD632552CD7
F6CA0F39982AA68D1BC452B07D1FC8EEF22F8A8BACD0154C47D4A53446941C1B
D4A94A194CAB2693CD5FB68E712D2F74A08001E53E35A246D43443C8AA830302
52AD67DCE9BAB985B52428ADA49CAFD61F4400A6939634A81ECF5A229D2B96AA
B55C0B5FEDCD90E211005442D767AA1529E3BB838B9E33DC3E92F5C73792F2AA
1FEA18234AB7C1C4315AD965CC4C531EC8F491AF5C3CA34E20D5B6835FAB0C9F
2051C8A75050DBDE35635C1BEB2E9DA5F69966847A2AAC998BEC17693577378F
226892EE7B583D94CC93E08954043159F4386201154D4069DA2732F665B6CE16
16853BA0D4DE43BFD774DBEAAC0515B4043C0328E3B3E7B74F9B20D7F29EEDFB
F9DE29DC30527CAB2D402BDF7891E6AC89151763A2C52BA871CA40CE19D69CCD
B896873142CA2E50F2EA78594449914457596B6EE8D2B1787EC384162D1AA781
2E783AF699F1459264BB59E8ED0C4FBC328951941B644D69538C3D023168CD87
F7D7697F5AB186682BAC2D53944F47E4D257CB1798520F27F654CC737191B200
D83BB7E25B8BF03C0D61A47E18CFABCDA2A4DC3F8F945E8803662299C3FE983D
7D85435A622646E53E867FDC00EC4D156C8595AA55147A388E68FFBAF8E1AC15
5774678B4FC74C5658727C392573F54297DEB3CF457FCD38003882A66A4CF8D7
B1E2803CCFC1C9FC29FE44E5D08D7E6119989A58C066AF5354CD183144AB704B
E7A5121B23918EF93CE8C1E798AE26F620D6D4D7F37176B20FAEFA93C3F0A6E1
A6CAD3DD0FD12DDBC962AD84CE3693C1D1B07126A675A8B6A2549537EA26A156
A4BC6EFB505DB5D268CE1AE6340946D2B416B75FD809AF366D69E8697DA3686E
7E7E6A7D1D4D73DE08DB49430EBB1AFD7F47CD61A0F65C2A56827107071E71F2
4E9D390EF7866AF462BD6593CA8E02E18FE3DCF624EE8C216892E1057F260653
D6E89D3BBFC6B7B74DB38E4448A3EC8EF84A695D6FB0A7A98DE01C1BCBBBB999
AAADDF72FA6D84A785155783734FD73E3C279E0C6B0951AFA58793FB6D09144B
082E128002D22CF1A177931DE7B2B6270D437607B5F9C5EF6C3B9289ABC3B2B0
152FFEA2177ECA88E81312B14F61D5378232BAEFA975E525F9CBB656BB32CB7B
A5C07F4297BD2A7E40FC496B43E2DDB4B20FDF56CF8D0F9DC2E2179D79AED0FA
6836580837A57F49352BFCFCA106A594DAC6F9CBC0BB347055A3045E6E063472
5A29B0BAB7C070F54B0D06E170DC748B11C1A6568B8B1A0B8FEDB2A91CF8E8A4
70B784CAC1402826D9256FF516CAF2ADF05421D0381ADEB15DF829E9C6404EE1
EEA9A115493E2B81AEDD1B3309F913179722F16041E90A192B6D217B6E0B6AD2
BD1CAB296C733FC7489A0FE816E8A79A9FC1FA6F5AB1D724293D179E3E09E84C
71B323EC3B3EDCDF11D19875DEF7E078D1DA94B7D8E9E646D94D4225FE13CA98
B298FC4B9CC10815B698981FC74BB192A870E95042A102D3A1295436CC383437
DBDE75F59A1AD8E5987130572ADB3BE68E5977EB3D88134E2919BECDD4E2B235
CBA28CA5EAA7D3F80AA9C2E8F264ECC0C02D3B718F41E71C6A258CE12B962930
D3D0C3AABC6DD913FDF4FFE0653DB9F5A3F32099BB293FC9327D4166DE8D88EF
BCBE60B4A809E8A714E824F0EA65E11FA79A3020F76D668D083F5ECE0D53BE9B
DD3A9DB160923F84C14D497BC82814C3B4A341530C88F6424FE08A98707CEEC2
446ACE741C2D8C1A8E531CC28E42CF500B8F15D1E8670BFFEEC88BDA34229623
629202349884DE2EA910A363F8A7596D93AA7D1281A37F30ED51D599EA7078EA
D065480A1616B626F9DE75F72CB55AEA3B898166317C2D803EDD7F01D463D9F9
78B3C42C7918AB016D7520F9471EA9A709AAAB26A02CAC4BCFDF31DC715AABCF
28EAA34D6FE8F97A665872B0D4BDFEC8759C17CFA85BD84E474CBBEF3B632DD5
0A694765E6CF273DAE91E994379A74B58CE813E386B3054E87055A1D93F6CFAF
2AA7EA2DF419AF8DD2D9B46E1B4BB6D1BED553AFE0EDF8A1D4870FCD7F8409B4
71C03C1CBB30E0275051E800D75774D5D4A195BC1D32360ECFB3788AB083E55B
A2B7C5AACFF1C30A3D7914557629FBCC81B3E9353617C8C2CCB22698FB948ECA
C674F6A9AB5EB6EAEEA36C8B831EFB619C9F1C190A5A4E041974695000A6064D
1B956954E6ADB556ACE8641F1627991AD6641E5CACBF571EBF1766938E755962
FB115A63072E539C9EE43C6519D41AC07EDE50279F9997AB6EF93FD4E823E441
BEBD61ECC6A85F4D227C352713C723C7F77DF6C9876F318333382EA2E3051445
64E5A47434533AE9CA24C26F757696C3F131521919AEBB6A5817AA99274DF957
210A401145ADFAC72FB411A31FFB8A31AB6328AAC8CB646A338A2239F27C0074
310C38B48C2012E0EA444924FBC760A5E32C9378F219D51FD579661F3E2FAA54
D811386573C91A0671845ABCBFAC15FE313FA135EE23C0D5C8CD419F06D18EEB
FDC248C4421CD919741ECA9308D44A93D148900E639B86968A49116A09BB7F32
0F0CCD98F2F7DF378E1BABB425B603EC5B28D8121A2675BFB1538011B31D5E97
9F30BE1051D31C8390960420D8FC056B04E77002CEFCCA048ABF73C101262A71
1742C32F3F5A1C25F7D6A8D961E40A7250B38C88F36222BBAE11B67BE28B1ED0
5BBE1B6D46BD498EBEE6FA957CD9DDFC74A517B5E9ED9BAB8D42293545F332E1
770A3C8F7B1EF2DE80B713AFDB269EB4E8F908EF485539C7E33C6585B6DE8C69
ED7F226EBF7B7954EF4D640708B7D2FBC1CC1C24ABFFBA280CD8260FC353168A
410F5AD9F1B9761008C6753F06EC0A4A1CC2B113AB17F3A96A5AA8CA30ECC8B0
17D77772F3F95A041447594422EE7FD6B381D757A009FDCF09CDBB85332D63E3
F8BE1DDE1887938010F10F998FBA3EBC109802F10A1520E4D3E950DB40B42802
3A921D427EEE0E098E80A18DF609C2172E8954FE7E4A66C9BD783C50D1065437
2B6687E9A75F3C976E64C24E8B2BB509F966EE6503B560C49D1254AC07509685
005B1471EB7F789A8650AFCD1F29B003E56B90B8BA86475D8A32206AEFC8BF47
C1509D24027446B0481EF848A594F8E751237CB42E5C894C98A1FF2E6B0DB9CD
D6D0575E9B3B16D7D737DD0247632B208A3B83181BEAF604BFE6916F0FA7D61E
2C568760194B2F17CCC27399BE429CD6AAC616784D91B39AD85200341B4B3312
7E9AD01D41C74CAECABF8616AD95FD9ED3B11C918BB38D165D3F118E0F3FCD26
977D99755C786C272911BE793505992ED45D0E6D3576CC4E86F0FE73230C8909
B1597C842FB8222A66756A22485E8EED2EF67049EFDBC5A3974F74C7C76A8D01
486E55880DF02409AC7D972FB083250D491CBCE056A0158E03373577B6D2BF8F
DC26D77EA9BF7DA6707B0A9B94E0BEF9D47D21527A3B1D808785CA349E1983A3
9CCB7E05896DE7069693EFC870CB86162610DE6037E08ABD26D38BCBF23B4C43
8A7E6FD7EDDF54A573A76E58ACBF3F3F25A74A47A985E2E16052A1781FA281CC
72DC550BFEDAEE5D5100B77E3052E2E065DE21F9DC0590931163335BECDDB32B
40B3A57ADF3E4310B29A262C08063C01EB0FC45931A59EAE1245D3E7F8D73B13
087EB9B97B59C99935D1EAFD4894A6F02054BC6946007A8132259306E8E278B9
4EAF6115EE6135F0ADF70065B9D5BAFEBE729C666E929D228C986AE84A67C81C
E42076FBAC7F01894F5E84EEA50F61F4C70486D7B0D01AC800091119DE5CA7DA
8A6A6D87679CAE81D417764710224AAB02BA29CF3FCB4190ED2C487856308CFE
D47A1798199D542502CF3455678E261DD2E5776CF99A96CBD0A038B6BA98B607
8C9FCA1556AEB8E16DCD3A965F4185B55E7E81A66D846705F7C5E94EBA49FC92
804B68E6CE5EA8AC69ADBF68EB3D1734B6A9696D4C6CE3EDA00CC3337A8FC5B5
41D8F2FA4654D530256D5C325EF1E3C576E45B9145C6614172A38A90C448FDC4
5A9910109E6267D0EAF9C69AE053F2CD1F549FA6CA65740CC7FFCB1D08B5EDEF
0E0AE8BAB60F511263D775A7AD3265897174349E01F81CD963A1410467FF4E54
FD2D9DAAF0AFF6D93180BFCCB977ED5D8F37B922515858D697A44844F2C72EEC
69555B1CB68B11C0E04C822DC99243D5F8211C92E51F2F920A6C1CF559C515EF
85C7747CFD61EFD84E2899F95756B198949FE7C59B1F798BCB0576672A693BE2
5A71C8D55CBE959E9D0FA8D3886D40ACA9B70D465AC2DC5EE2FCAE9AB59F82BC
247D114BC04351FE75CB3AE344D95D6F2A81C815E0DD08D519E1D9DBADD3CEC3
E71E20E6D98677F469672AA59D0EBE014A3FF28EACAEE1F5C52D71FCF326E5DD
5886BF54DFA2BD6A74A7A26912ACD3F28E8B1DF45EA09FDA46E37D974B85CDBA
3B50B7D16C3DD0AAC0858943DD319CCF8E7A3BC28E2E7BF13ACA6B3BB54E5872
6C1DE8376C5FBB1D6AC298E164F6C182B2FE7F5CB3DC135B4F6827C70755E671
08085652BA05177872A46DA310F17C185E4D8A8B0406CA423CB281B766B177D6
0EF103E8C61609DDD55A0BC8ACE6E7972CDD9318A247900C698EB3D0840B50E7
F3BC91F69C38CC6212DA06A3A0C730A82EF53D2D7BD88388082E54DEA0654438
F36357E82DD0F8301924EFACF9383A1FF88A692FD0B946CFB00956C7B31DF454
BD990124E7A059E8346C41216FC6BC6F5168FC003F28E982F489DC229E9D659C
80453F338380983D72DEE80A0ECD75C4DCF4585637A2E7FA7559399414FACFF7
6CE50A62BB1A09419317DDF33766DBDB57EB2E83E6285682450EBB6D42D35A18
DB44643AF9F1BCD6955231A36AFF6FDCCF6F7DD52ECC29A8E113C72F25245F98
5061D09250257098EDE12F45AB07854F17DCCDB8F12ADA4F5280225FD64BAA30
212D95BE30121E121D992A1D8ED0E05E448AA329F167BFF68C7E77D356C35BBF
8ACB7E05A5FBD84ED19128C657C809193547C621DFF8FCA5D68882C4FC323DB0
1136619A03A9BAA133637EF3394650A471335154632DE08DC6209709FF6CF513
A3C0AB0D72842C6063657FF74F17518B23539FA50FE2262A5AB118096D22327E
B12A7F90321BAA6E473264B6629F7A8B5D1EA161C35F7F8D9628C170CAE24E41
16FF90EED3FA5DF39365DFB57CF95548E66B94DB41BBBE54223F501B4C133D39
0D0180F9F0BA617EF4308E90B999DF0A9842D5880822EF546CA3C42AFF9AADFB
84CD4EE0EC4382FB3AD576EFD1D74F96FEEBAF8EA3184F638230D0BD9B8ACDA0
A235E795A2D32193DC823D9BFCC20EA4E2B06A7A7D76781A392B095CB4635821
FB57B445CC3B9E0DCB8E60396ACF37EB697BE60F6A4F4DDCA84BD33929AA0078
EE24881E126D09F4F3516E9F107603D83D7C11B52900EBD1649D99884CE2212C
D4B9A2A2AB61BF35F388D53CA568591FC8CEB44DD7DA3F9A3FE17D65BE80E0BD
79A29AAC6AD2096FC1A5EEE866F5C928DBC2FCB7E92A0015E26879ED59EE3398
4322BA9944F1BD101D44018362ABB7DF087321317E7F97DD44350766E5CC875C
719579AEEABD29FDC20E11094E8840EA203D7F2FAF17F256C41BF5F53B7CFDC5
B995049A130E49C18CF4CF6FDE11C6210A77DEA4EBF81BD6BCF1263ABDD7956F
B4ED64CD18471A492AE9994DF0D0E9247CBEF5111935E2C4EA96BB3C09332BD7
61C0A535ECBE5161680174701BCCDBFE2834B3784787D7C42388B93C1554B1DF
79823A500D6A7B8DD70A7B8F41835989961D223AC612FA34C9328E82E9368687
B86C1735B44D10BD7001DC0D233791740257B4F73BD4C954F4931776E8D2F1D2
5A86D00B016D00378074809E5B2AA75AACEDA867E84A465E2288BFC4CD39E8C4
1F4C73C461D1DC2081D82BC06DDAFBEB3E1E7B62F69F73C4D5DAFD0887AA2E6D
E3D11FCF220A0EB63ED73A83C9150A1EC303EEAC0D1D0641FAF5D3FE76DCBCAF
0CCF5D22E6C9D9BAC76B1C71FA759EC6B3E2A5AFC4E47F891C150A3D42A8AAE4
A6F8B025B22786F7EACEAF4BDDE96854E083748C848942C7D6145500D77A97A8
BFABED08AFCB8822252F73709DEE6F3E2DFAB0C9218B29C136173D5D9EF4C45B
98C8BFC32193A82A751795FB7CF85AFFD4A1DAB6E9E32E0B93C9E251FB802485
38436DE5BBB4049A169E58DD89F0CA51655AAEADDB08BFEBB25A8C9CC5BB7B64
230415FE4B3D8881E7F5CD62ED285A61FAC9954C6F9E091FC279346DE733C4D2
B6A193558F2CE93E562A295C0D86C0DE562561BEF88F3907BD5B1B79547042CC
C3C4A9D91154EC1175833CE5109C4256E14813F5F880842C977BA51675873D37
223E3D2649365689DFD2EDE98D58A3021BDB96BD8DEB95DABEEF96C5B2E1F056
ADFA238C5C3A45520B6484D76ED9F758AB466D148399EA6ECAE509DACB2A6600
B868D6D6C33EFD368C228CD2B1E8497B9E9F07D441AFE98EC083ECC546679B48
2834F57B09941D884646C328C718274AD90321A46B17DC93451F19629E85CE78
60070228A51822A85F525885C4A50E5FE22CC21E59842C3A88211A6C0177CB14
0644BD6190F8D9D5E224BB205A87DAE4682C680A9345547861F4FC39E0EC5464
8CA05130E0812C23E0858AF7EAE8377280F4191547773EE25E1AFD9CF1BAB7D7
9189CAD7877D3EADEAFBDB48CB670172CF7DA1CB3B99B8BDBF8E5F1DA7E5E6EF
2B361DA2820F60B19FF4E950E3CE4CD49F0E6A2EC04E6EFE3C9D24AB26764606
484B6B49FE4B93B9EE2E1D8C12A264796321FC0B4B28D57294482989C1D3FD4F
CFFDFB50B8815E0FB142B3C5793A53F735BD5D7B48349FA2C6CCAE9B19D05E86
3AE038A7FE70CE5AA2E6962AF9ECF08FA62BEFB3C38E80F5AD3642C6ADBEE35F
9D2D171F97CB838C6BEA6DC298F6B9BA782FA9DC7508EA01F90298F0C2F748CE
6FC03268EC85D9F61A0BCA83FD9655ADCA9A3526896FF5F372F1EAB37FFEE3C6
967CD45E3341688A25257C45BD3B2B588F90CC55AB2522A4ADAFA7499D10583A
39F9B5235B0625E6D3BF6C7F5FD5846AFDCD3B4089F04CEE35C0B418D7BF7FD3
87207D09F51AA7F531E013AB351440300A71E2EB5180C74813D0D18944927CC9
5612571BBB168B8D597BBCD14A02815E0767B29F56454BD97956EFE77371E4DE
0BC9357E39B1790A44871B501BA09619831971231A6E65991FDB89DB9D5A59C8
CC1763A9E5F0F830B402BF34BE3CF48B0D7F84DC2796D62FD8134707ACCAA4C6
CF627993BCF2EBCD46F0F430EA05C710DF62C70C404C4F0CFFBB50EFA84EBF57
CBC5EB9844C5CB408722081F5567829286558F0ECF984F6F2F66B2D7EC67123E
A40AED87A06E53632409A4A58583691FB089F203636ACE07F039EA393EB7B4E7
3E3514E47FD060F90374871BA8A82D7CA2197109AD2A42D33FDB4C21C4779D73
670CDB73E241BEE3F2282BCD30570142D6849BC52A87EE916A751B7D1AEB4E9B
16C62A6E9314F6B7AC2FBF9F8C8409CD1231C13FF82ADBEAA8F49CDCF3B2FE94
F6E190A5DF3E5FBB590B611358D3FC010FE936637FC81A52979A07BB83E8578E
4A7DA516534FE037A25CA905811D477D2533C1CA3DF49F8B8A2FE13B4AD75385
3FE355281E718B5087D454ACB00C06CB95812179A077A06E422645EDDDC58672
31A28871D1058B8350A8974E1790838DA552E6094D1CBD3450382964DB199C0D
E8DD5F4BB0033779079A30722E6D92EF5731556C7196F870F35D1AB705D5DD7D
91452041567DCE974AB99753BFF723D43CA57BE9F4CA27A1EC99BBBD4D3AAADC
1954FB9ABAB1F77BABF65E99C2E7BDF3996EFBC10B47D92739FC9425C4255C89
3F7749C477F7EE44FA039A5EE841FD883287150CEE947AB3E9DE9C7563E18B28
8041198AF68EC73B5E94AC6BFD93F08D974A5731ACCAD6DCBA472804F2F02F17
C0B8C68858F9890EE520588BF5C870123E5C0B4B9137E80BF4E364954A463E0A
C579A16A9578D08C3BAD445343799CE84A6273B94762E2965A3C8BE5EF335340
66A74468F6139916159C5EA8E03BE2C506206FE550804504C796C9327CBE5C73
99182C0C8295731614EC5D771E7ACC4505668212BCD1B72E5E47AB8D38A4FBE4
9DE348EA9BCA828F69C401222E9C88B217C0E06E7D25C3577FD8CF2340392478
52BA56D5637D08E634F6F8ABA0FD15C8B7425D926F1E2F0CDA5CA40AC857DF84
565B7C57F775C5511DF411970AED8EF8768596EE62F0B3C4A7F390EB4A959D4E
0023893F2EBBA86843E6118B2FE30C19565B4CE6A32F98B22D6B7DE942C9F31C
F4367B4E88347065CCF927E865417DC8EEB9E0C080BBB790BF7D816B16F347E4
42555BD9CA62FA4264FF19256A4A0B9695AE854931787A4B272787C65B147FB7
AAD2063DDE1CF1DF7CE66D250E39F559097F717602D1B967EBC9D7E87A768516
D599601BB271A1EBDCC0E8EB8ABA8B6EB7E9698CE3844DC1203744C86A1FE55F
C0C2254884540EB943C69CED415B9600D5DA61F75389E82FB978D0D24A03FAF6
634AA07E23BBD540C153EE6CF365A854B7B268848C2CB472D3FE1289FBB4C85D
4A6003F9C05F7507ABAD7E5BDC23D3623BEB2D87BE8E5E539CFB3DFC69DBB411
A42A236D8DB4D7271D50DB373A47511C4D33711B12975E11F3B9D91FBB4B72D6
FA848ED90BAD610868559F4063A9B54118343C969B35DBE7DA731C03D5F00C3E
0A18C90F5428860DA7B550D481497C42D6208CAE75A08FDF00F951767AF33F88
1147043DE7DD3DCDD656F6570C71D3A79C37B6D8B2CA3A76189E6F30E6714746
9150BEFA2A84CD364C71046577222ECC49DA9AB14622755D944D1EA67ACACDD2
A69AD9DC1784884561D1B2CABAB27724340DA0957EFECFF50AF51D6F6AEBB98F
74B4F6D1D7912DA9D0AABAD3E92BA5740EAE0A32CE44AFBB8D16B56FCF715FB7
11ADFF99AF1211B66B454152C1E49C7DDED85387311C8A67A71B42F7C291FC43
7C7EB05B30C52F7820454F35BAA2C6A116C0FDCCC9327BF4BFA6CCC87AF65C2C
D77A0C9B261E3201B70DBC0DDBF23909C93E871B528E74EE914BA83BC5AB2746
1667A2878B343CFC50B4891F89554F425957F0C1751C8E41283CA5F58B242CCC
45DBED65B0F87C4924C1A327FC0314DE966059FD18394FAA6D349570A3958220
046E1905725882318D373866EB0FFEAEC2AE288174FB06C91810F8DB39EE35BC
429F735D80167BE9D4038FAADDE0C72C5EC7DEA9536F7632AB6BE37BA76972CC
698139825F837B69204CF6A6C5EA0D32A3BD8716FB41AEAC64F59473B6E48332
DD215A109B035A561C37646554A555BACE6660FB18407535C87B7FC558E6CF9A
C338F0F25E3781FFEFA725879CCA7832A7E644CA730B6C155317EB65448514C2
2235DEFA366308581D50D2AB79F037CF410CE9669A7379752A744E3110030B15
0D027A1217694AA139F56B96921014F63A4FBC08EA89B0445730E92789D7BF73
23FAB2AF1C4238DD08870248A987BB7910DFA67A680FDBD00BC47733D4FCCEF4
6CFCDE53CE81F66246FCF6F3A574EB5F87BC9B08B83C1CFE9AB91D93F8FEB7DA
B17719E9064FFBC6C856619D35A33D60F074BF82AEE5302C55D5E1DAA4CA8CA7
D944F44AAEA5BD927C6C53F1679E3102A6ADCCE79AC91E0278DB72630CD00B55
E5EC2C1F80109151719326E13B041A4C793BB604127D506D5BCA87817CEA402F
30B2C1D5F6CE8482551D9E139AAA88947DD62806B87E7E6D0992454A987D3970
8BCCCFA58154EFD3A4C42691B366C2928D00A3381A53A80E058C1EC1E91F8F2C
C3B6230B1478CF58ED586E86AAA1415977BF8AD25D46C080CD2736F1A33D8484
3DC62EDA06672BE8D54841D5B9323A4B3106EB0E8723DAC89196267452555E11
25886518DEC1026325E81A5B4A71F111FFF37593C7E23C11BA29FA865A28C793
E4E8E40719D225A2BE5453A18E4CAC6FED9AFA4EC1454558864B3AAB91FC92DE
8DE2D70E7FDC3FC576BF9FF8A99DFBFFDFD5E71813BF169639630DCDD4F143D8
B2D69E7685061815406F2C8DE1ED4BE15D8909EAFCCB0081FEDABCB72A293500
3AEF4304DE1198C97CA458085AEE229C55CE58F2A88C973FAC10890AFCA7BD50
8948BE4D808FCF3BC0D1DA7E8FAB0C2999D335EF78C823C8BA6976BED274BADB
F7E915E8E1C6B371EFC575B8378EFE4DE60E33B9CCC4A88E1D73F972BB56C524
FEC5C349A77938C390C00AD6292D6030289ED6FCF2CBB9104D63D15DC9CE5790
3499884205207506365F78D2F69DDC8C1385C5937E8DE6624BD005DCBF31C694
9074FE8F4BA1C8CE209AC75FE471D7E8DD61C8C4AA7E4753C313BB1F90E6BC25
7407E984449E560A16BE968A2431F2D759519D6E89355806431553893FAC2AB9
2B46F02DFB6E483173EE82E70A6704D8D6E2C6E0DF6B65F403884AD94A0798F2
9FA0D905D44DF1E8D79695A39CA150B61DB4CFD2911B5924F7508F5A08D45465
9BEA3972A055A0B3069A6A09EBA83049E17B1606BE51A2F8BC08230743A289AE
59C63E38F993581B8EF48AB56BD2CCDCBDAE0CBF854D5AECC5C726EEBD347B3B
D422A4158BDEC1742581113D3B9981F3B9E697A7DB6EFB788A61669890119187
4EE88BFF3C0CE2A83378E9556442AE09727E4C63E1B64B1A24DA3BCB88011156
05E2505B6FCF702FF6AD1504368EF18AF82FCE08EFD6258B847BC38248A5D855
AA3A6E3F07C02303F23F63AF70C72AB8B8C6C016E2EF22A5C86C3C86B48296C3
558D02268E052083C3D590ABABEDA8418C8FD794CFD942CE7BDD22BD1F28CDF2
6A4DA2D231954FB9979B1BBECED609DC00543F4CECC060541C9C85052CD75F6C
74F35FA6AD5722175CB6F565B4E3F2AAC428353077B94F1C32C1DD27829F1AA6
5075DF326789E8CBCCFDEA4873D86EA334CA293BA51485DFD483AD7F84631CB5
AF9DA4B87048CF5810DFB799FFCF59EB4E52FA6A84770CCBF51DD01961B95FDA
DA16492D8840F8D2AEC813192523CE75D8B91EC7F8B791BB089567137068A726
E9B253A0ED49ECFC5B1C8A1142E613021F1726BDC68BD1720C0678EEF70A0C57
603CF579372CDEDDA5D01D5C22D6932C654247AF27FADDEF18F246D8817C4D4C
ABC6589C11EA3695E40E540E6941AF8A6B03144D9F97673BAD167E5DAC8A435B
0BF2BA77EE7996BE8A3FEA7B59A12553804FCB8345369D97569DA094605CEEB3
37DBF834FE48E2FF71600518BBE94331DB77207ADC0E8EE48E72BFA5967F19FF
34A638197EE80A6CCED0CCA629F2A2ECB47CEDE7B68F7A03692AFA42229A0A6C
5C6974561FDCCAA5A1BF93F098DC51A75167C051301E4B93834AB5E1CA3B02DE
90EF0650AB3EEB6E665609C497213BA93D33CE889EE31782CB8E240ECB25A008
D986901D21ED6E8B0CE4D8B3F1CEA0B66A6581C8DA6F08D9D25F43C0DBAC598C
495C79094B94836A7781B71E5BDFBD3A07DE7C1C1EBE3B5D06F8B992F126A724
1379C2955D4A2752C9BAC641B680C931A7FBED0941BC1E595D70225A9D2B940E
8EE7398B79DF8A603CD8EC364F0B6178DE23C37E5010802F0BE5C1277EEFAC90
C9AE3241D0358260EA687879D56F28F0A457859042D5A2E34899C4097CEFD818
E2029AD19DB3A567224661290CA6E776D513CCCC12F6CE4B4F1332C06EF907BA
C1994582B3F736C3B46D66078E394CDF817AE9D2DBC547191BEE54A9DB03E9D3
4F86329BAEAE92CA9831122597C207F620840B8F8540F0D5378A72A5E1EAF1EF
D5E8E08EE2D599BF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B0F585C973F4177645E522B942ACDC87
988817E8404FDE7B7380B69F5717648DACC2396456493996A2A6290FD2AF5F98
80387B45785CAA39BA4BD7DDA7C1280A05B1E59BD3A975DC5053D8E9AF36B7FC
3C0CACCCA8F8162C84F0481B9AC0E13B169DD71090273B2C0E5055E327C75BF8
774FBD896843C02A96FCA36D6BAE5519496DF1BD2F6565136FE50001332BA453
C6B82258000B6DD15FA53EF97C195B85C55CE43A3F6FD270CBE992B4901FDA96
9D4637B83BAA8BE742352E4D2516C19BD20578FB8225D49D0211D5B663ADBB88
A237FDD823DFDCB1CB4F166980614249C7D1C7C45783E9B8118B6EF9A2F85EA7
E62B1C7C65A3FDD3B3A4201D3C8F262D3B5D3B93ADDCB366B3F06E7E7F6D9B01
FF59DDB4A16140C85D55AF2AA52C92EE85C3788192B235119311B9888D0BE96A
C4BFD340BCABB8EE52F1D37ED339149ACA27758B1E948987F3F4A741EC887E5A
DBDA2E342B4285581F903204BE86B52C3627D3665E8A0DB0EA0084F2453B89F7
4EECFA24715382D8C4527982F9CF0D4F945873774ECC50AB47A61072C97572C1
D4B56E2EB23BBF72415D00225EAF9E732629C80762960AA8CFEB282301A4E342
028B149A4C7F2806C917030391A98B0AB95050D0A9A469DE86BD015A9438F73A
ABBFA8010815AD83B7F79B4DD5F1392A2C498A17C7ECFFAF85013B5C541204F7
98245660D390E6BF5E56B2FAEE303A56DCBE13825F41740DC01A0943E21DC3DF
C0F2885961670BE2D2CE87F11B7F469A85C5171196B0C9FAE33910E77BAE24CE
3579DB5A40B025266FC1D0E4C1A6FB9D4F0AE93963712A6EAD0F213646B97463
66159020D565482F1083359A646E435595D83F7BB91B5BC47259546803C6E543
D2DCF523444948AA64A791EDDD7E663A7A2B453BF100BE5B040A1F0E74CDD921
F5C6DDB0A775A9917B9DB48A3CB027CC87323440AF5E83139FFBC99A04E9DE6C
F33A6941812F2FE368F51654EF115AF46CFBC3800C3ABA9218CCE8DAEC14FC13
ECF3F5FF91497ED226325921CCE8BCE41C4871F6CEC22A583406AA0C6AFF44BB
559EEFFF2D4D291FC422B5D269466F71D4A11523528065F0A416F1C8B82758E4
1EC892391286B0746F03A829573C8E5E234A95D3C4E3648580529C8060D5D6EB
EFB7DF9D883D487D69B1BE98AEC50314B771EAD8DD59769DCA0BCFF9DE7BA019
D4492FE9211DA25FFD0011893242E9A69A9FF343DD9DA3AB53611F8139222181
1A24AEE2749DD3B0B982E192ECC7FD66DC2B1574C6A4E14691DA494DA92A158A
A281736FB1E5671A444297BC9DE8D824F0C3BD2B582CEEA410B297138ECB3812
D55C7668EB010F6E8953994E89F80CAB3A5537A02D755CE6C3090F5AA6AFC93C
BBDAA93953F0A5AEC7DC109C4EB9D23AB50403B8CFBA0B318A206241A9CEBE7E
0A995FE1F23ED1AE1984D78EF2399E862A22504795115BC1104AF67922ADAC5B
C5B3AD475E64E91869E0A83A55612AF97FFE5829429F15FA1BF3269B1C078B0D
7747D63984215E54DF6C8F65E748BB5A90A41846917453210E026245EA6A52E0
10668F6B44D39166FFA632ED5F5898857A342E19BA6F6C6AE7221554493D825B
14C2FE7CFBCC19EA609E3E4DFCD5EFA00E1E0BC7661A8B74C7B5CC6534713814
A48F72BC17D4F25AB9ECBD3C3B143C086871D37DB1C17A2C73731240011A6A31
4CE322BB6ACE6DA9DD74DCAF058A75EBF8B9089C9788D0FEE0DBBEA3A9378903
B2B89ADA2F2A23CE19E7C73DE55E97444F5910FC7C1A16645549C512F624DC00
9DA9ACC5F02B8185FB844F62D48618611F1FAE737BD2925C54BCD4ADA2ABAD8B
DF3E922245BAA2CF9289D68DEF6706FF9C1BA81BDD153DC7E4B034607A88332A
B00692051469549C5E2F62303906AF0732083CF3E6698EE25EF33667B242DF14
6BCD93110AE9C17191EDE7DD3EA9BBE82FC8660B567E1EBAF404CEF02397801E
4C4F419C4E4E1889D00BE06C702C9A2C6A1863C659DABAC58E9F55B1AF263C6D
424D96974CB3CF045658A15A0B4F240670914E608642B946D4A3DDE83CC1EC77
4B28214D270E22E0D926876A97AA9918C8B7BCA4367803AEC14315D905EBCFA8
CF517458B1EC9F210FBABB827D996E563FF83243A47898560ED80F8F7DE32654
30F3392B23473098DD08E37EA7FF0DB4E74FEE24307B4E71DD8FFC53AFE1FDB0
8E1B81F715FB0FF98DDE2796F1F1E025968AB5104CD2A2589F6DFA1D5434462C
18C90F42022B8830E71527061D99DFA6F752D0718FB92BA9429D32609EF1C4A3
4515CD6BCBF8E6854D2A19F2002CF3AF40155DD848483BC2A0380AA884E7CB26
A2C381BF04DED801F1C68954EF4D853E4EE35CBCE1770982E561FBDE2B55A8B0
031DB0173F9DFDD7AA45A5EFCFEA150FBE76CA3DF06B0BC21BBC483EC76B4FAC
A1D9B2E4B6CD414DDE5F19DA44AA7CD3B3F07CA675BF854BE66B6C574D8AA239
5978B94412382D40420FB384E44589F7CF1593184245B4AE163C6E69A070CCA9
723CF458E5852000FA06954D0D751C2942D2083F18714D38A5BE7D65468841AA
9E5C5B2277DE1A7713ADE73F94C95F7E8C58229E51DE4F50CBB97A140C81DB51
9CEA64244A0808AA3E03969A98C5924DBD3DE66FD28C65DFC1EDE0996427EDA0
CA92F6FB505B815348E934EB02ABBA2892A8EBCD6C3AD71A18973B6736734923
AC44C82D1354EBD18640298D9BF45784B68B5E418E209FD8CE920D7E97C9CFBF
68707D79241DC53B9462647DE06B81193FAC07E1C76A43402CFD03257123E997
BFF20CCFEC6785B5F51DB0E473817D9E1A0C70F58D268B7770D0D897466D893E
32BCCA4C595ECCB8D303F91139467C339F5493DFF767B3891744650674242B7E
9BB09A553AD5516156EF795B45BF3916B81D61B34C2AF3A581D00C60A7E6D9C5
4EE41EE50E7E44723EB4268F7FBF7F2AD389465862718B6186BB2CF4B290AF5A
886A47F399E09D4ED56A73AEA5A2B1D5C4C6A2BAE89A9EFC192B0A503A8D8AD8
DDD7FDBF80711A37764EE0B1C333F104AE66CE447123DF5C4349561CBC7B1254
5AD2D7853660E2E82BE42043D64F6B9BEDC15814273A9908AA71E06F2F812F5E
DA062C703A602B75D60261BB5E5170F3FA8338E7170D637DB7E9326D65EF401F
84AFEF4BA5AE92410C31F4449B0F6E70F848138A84A69CE5A3E26EDD86BACE04
0EC308D95FE4C7C9BFB11AB20DD156BB4B177D2368A1C31B4483FEB4C8238E7D
C2D1067EA925216A78E7C80CA721624FE364847261CF75FF1DDC37C7ED828C88
6ECB33926C45428460AC283786C0149CA564A94F593B1082F5C0708BC66B8287
EEB0BEBBE5A568DD1DCDD0EAF0C24FAE0850DB56609CD8BBC307DA737266F959
2C5305DC3FD2DA58D3BD94AB2FD088075A74EEA0DB4F6218FA1BAE5CA428FDF2
2F07EE4525A263F6031FABB8F17294557929891574AB81D0F98D1E79B75F2C69
A86F2AFFACEE4FB5C3963313DFF61F73F84F344FFB3F99BF6A1292A838C381D0
A0016455E172DE0C8F251558E0D294D3852D68726A4946BB83E4728E1CF8E449
7211DAE158F2DDB6A86D0835760D221A457E0EF8D3509E39837359BA3562E48D
84D36B6D329ABCADAF9CEB29E09A792E33194C43BBE6E27D58BDBDF02AA83FC9
C8C5076876ABF67E6B919E423553C2057392837248E0B9321CAAD83CC8A7BFAC
33218BCA18B0B8D728F5EB7AB0D7C7210B025378DBE0C7AEF33086981E774B08
2BE739B428F46FBAD6E6CC6B1905140B6A496100C45E9108F029E68716CCFCD7
E26DE76469479963BBA48B780779CB9F4968A8E49D1D2D41749A942880D34BD1
3605ED1672C9A25BAA2F25BCDC92F98CFF9F3D5881095B96FBB30E84E6F5413B
11FC9A0751C9864D727013B6AF798D3CD31DDD96A7DAAA193CE2C271F8A7E2F7
706FAD28430DAD418AA997C16C2988EF7E0148A1DF74DA038B9477071D853369
B8ADE0B18E8DFDE785893B5EFD6019A335DF12D2DFA60982CBC90F930688C943
29B65E14F6171EF7CEACF4063F1B86C7D5C49C840257BC69181224F36CF51A1B
4A554F3862B07DC9D9B0A60C52167A3B819F2DCB453312073C7EA122F58EA740
2EF6A7B5C8FCD1A6D912D434767D7B8A4C9B926AF19C0DF704FC220D1D53AE3C
C92C910CAC5922F6AFB148FCE2FF6346E80EEBD1B06127A7E7797B41DBCCE9E4
8F09AFEEB26A165BF75291EF6E74899AB3A9D824CE570B04A8FC51887E252E8C
A463340490CA6634BFA6F5B7453947B40BF4ADAD86EF5BEE825C3F850B6EE405
BD323F078EA387EEF02769CDD90167909E4A06C058C505D153C8ED0FEF53FFB9
1E213252C58D39514E9BF5435D4C11295A73FE3649A98308BC5906C1DA356869
F4B3C17190CDD28490FBE5CB149A68C370D672F0EF548F4E46253091731FCB11
44E0DB8D0765486D88D0CE2384927B2668B569007A840FE3FA92A0F6A00C43D7
2B01EDDD8E74C25BE31A296BD9F69A15FC31DECB3E3364DC71629D041E4669A0
5B6754EE7CE90EE8C3BC96B5ABA942FE0F7E1CC26DF0F139B04229B103558D58
2179FE6218E090422F74FD548341A957DDD557C5F5EDABB511D068C9183BC01D
DFF1781BA4CD3A2F97ADB41DBC85B9F5C5D0AA1EF139BE26FD7B9F79EC999F63
3FE91FC8103AC6DFEA6F007AF4A42C0A08C4D309B4320D53CB983F9BA5E77BB3
F6A96281564D7EC135BDBB431AA70981E77AA5E5E76F43E730D9D3D046235984
BBDD588CDD10DEAA79E7BAA7E7FFA6685B0C537523358DE4A06B547EB33806C4
F943CC8F1342F2A9DA4B5DD9ED6E3482283ACB506A2D6812D4676F3574144C1B
BAA961E2C39A9D214FDBD8A4F43B8C4BB5DBC6086BE4372789A5E4A8BBE7C909
E080E70BFD16F3C8E503F6FDF3D90D232B567830C7EEFF5F93E3AD11DF4284F9
DBA8157C09BEFA9E0EB256DB79B9D0401442F1BEBAF5FC2764F52DC679F76F34
D2D9CFC9F21141803BC479319A7D90FA59C918AC3A932969D3CDE2F42CFB2CDA
009C5DCDC2220B7A66CB3C14BFC848FB954363EE07514AC10B712825A46A68EB
78AA3D2C058488C29EE75BF6B953E23197600C24AD4BA8714F590226C6DE969E
29A23B9E2457A326E9A5C97A6858F1F198CD09E67E88E2DC98C1D3B450D864B6
B348501D3073C42AC1EEB4EB47EED5505C3562657CC9ECB22230041728231923
2BAFBA6F63C1587C09CFB052316D4D96E57440D0CC6DB88CCFE8ADBDA8CE8FA7
FCCEDE1BD4B8566A268801A72428BD70150375E57F66F06D0F943CB8B47B6498
BAA98F84EFDB37830D68DE211A69AD883F892788AC702CD6EB52FEF98AB5E92B
948B5D6CBB9FA0EA7EC8BA272C76D826987D002B5FCDC1B9E7775D3F365C7845
24E0BB5EC0242DE0CB5F989871CCE60042E3E8AE2DDB34FB454F1FD7546D51C4
2FB9B6A9C4362429C2FBCD39A24463D3E0AB87B3E3D0DC4C2312EC701C2A55C2
3A71E12403A443558673262F5C1D848726B4230B4F8D878451CEFEAFA495E9FF
330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7EC037C572BA8BE7D6136C56B
289D8E66A4AD0D7458B847473C6B1D34142F4C465F9470151F8D7F06B64843B5
037DE4A7099844282972DDAB121A040D3D7CC97870FD8F4C54C9217FB5FA112F
B98F3053BA620B540FD898060053D11929E44C07D03436CB49F934EAD47B4569
2A491285AF6F51F6FE41350D1EFC9F8D4F2B7C46FFFCF9F4AA8703BA987D661D
B928E64897593A54A7B31AA85081DA0E3C91F1F66DE67304C8151ECB8BAA2419
D4B6FADC84DF25A4FD2C8149582F92F13324F38AFA789C22EAB3F99C80FBF0CC
A7BF4BADB8D4AE414A1410886EFF8D547C60BB2BD6CE0EFCEB51C3C63436DD46
B6D3A3EAAED802AD81B87B3FDA2CC3472D6D40775CD82E40FD770694058E5A6D
C2AE4C627276365855F11CBBA6D747BFCF4653C5A3A06DE22FC1FC8C4F065447
F5AE375E90AB1DBF49A5F9F66D9078BABBFE2E4AF4652A045415357139734137
45C985E9FA2045FD193E6EF5F8491B730E6F350EFC4BA1D6ED0451C01DCC92B8
A4010A5FB94633C8EA90341F487B130E254DF39B4DE5BAFA5B9682D05205EEC2
4D55E227BAC4EF115AB6116957DA97DDFA62CF9AC0C9785288184F5E56B96A67
54C18AD8D66B2BDFAD334ABD6244DA2E708ACC998C1BB5EDE3A45AB78996EB94
C7691C231395B2F35826AAAA4737FDC0FC2D92581F94F9B8A37C41630F1CC9B8
2B395BDCE1885A1D5F3441B03AC32CE47802A884CDF665D0494FA0B277D5E223
1591FA97E26FAB18B1240705C19A10B538B05D202594E63682CB4D4FCAE44B02
C36C66177F200389C0A0497C1D25EDE40F92C33B7ED57A8DEE7EEC93D1B23562
F731DA6FEBD8B6047621E8B8FA2E584CB6F90585C75CD51E5B5525732768D252
F2112EEA9CC765ABEA79A3FB93C2C72655EC7CB2BBAA7E0196A143FB5E7E3FD0
DBC4003AFF34B4D27C588A91F02AC0F954A2C19EF77D52E058415778334C267F
B0241FB8F6B191637984402619966D676DD669FD46FA53FD173D2203FAA38466
749EEC3EB3C8BEE2D9F044DC53A5069E7A4A7BB23FB443A7283C622B3AB62E24
F8DD266DB24ED805A953CC78CB7FCA6B73C9CBDFBB10DC9E65E2233677F47AF8
0E7C6D6D75799152F5232425AD2F940884E37CBD2C0A5B7418035BCD5D0A474F
67A3F773CDCC8471E3B3C15A019994757099F8A4A09C949B8270605D5336CCC8
4A5B10A14A58FC3905FBBB36BAC1194722D9439830502AB6A444A3886C68EC2C
9A6FE5B57ABCB4B0E4FFE96B143CD06FA42E2F341FE3B0DF35372D97219A4FB7
37E76DDB8BD770DBC1892536DD870152AC8A2606939F9933104FFB0352654D8F
F4E6C62AD0FA784CE55B233F896037EFBDB0DEA139D53970FB359ED2D1A7039F
B4B0F6803F8D9FD11A591CA1D183194E6130736AA33ACB3C77587E19BECCA43E
3B58800BC03D4E0FF6A0359AFD58282BE518313CE92F9D8DB63D27874E34D9A5
9303CCAA004E3134C83EB0852628413E45D1AE657401EED472FC217998287A75
FA435FEED6CC518C71AE78911D1E965399659D423EF9FBC67C2BC7EC89B20C31
C741FA4E6F0BE9041F572AD2E0E96BEA7033737EBB7C692E69A65E936404E4E4
A7D8475789FD8427F4CA840A5EDD96A6285BE00A906A4BF57B28A1DD29D10C7B
661A0B157535AC2396AF5AD41912EF53B22A8FB989ADF40503BD7F3E8D7FE79F
414E104C05019336F678A4767FF59D7CC2342F6ECD6224F253AE769F2F31395A
0213DA86F93503F158294EC9DFAC500D021D8A82D319ABDFEBF94E0B5FA7C862
8D4F83911E67CC2141780011A8663D3B26D130B28C7A4FC3E09045AFDED89637
91DDC97D3763989C141B7C4E3461AC52601E68751C18998CF388BB92FD58226D
3FFEF39764526237054185C28139AD81570CE2F13CDB8216F6ECB1AD37C4C1C6
057CABE0D9CC123D8EC78E88FEBDB7328DD8994711FBFEFBF17BDA00A9CAB544
379760DFA62661527CE5FC80182F61F631BB60BF87EADC468E0C18B9B2B49CCE
64613E527415018EB56B9899B031D76046865A0E3A38869CDB9DF9CE41B307C9
106E182079520F293D8E36FBAF97FA67CBE77B3A7E63743E1CA41D716FEE382D
6BEC9F2A359D6C0F3F168DCE11A3BA072B93E1401211DDDCF1DB6927FE4771FB
CA2EACC2282F9B01267F10EADA2EA7CE36163D361C4BFD23E7FC079D753142B5
7653157A49093E0C75BE8D6D72F58C616BA9BC878B9831A553B8DFCB43AE645D
D5422C54DF32C1452CF20DBE026AE432BECCA21EA77135B7C4BE0CB201155827
82BD257185DA955203C9A0DFA23E9417F0081D2B428CE77B22554A250D69ACF2
D286475389129C3D22C55675580F750B16D4762877C23011A184067DAFB7EFBC
CC9D747B2DDBF2CDA567DA7CA1F4F3C2E51943380CC886013F6A557E9462CA5B
D0535885638502FCA436C4E0437F3B97C5CA6897D373809EE082CB0A81496D5B
8061A641ED546BB25A11C277E1ABE90A54526571FABE5E6FFD15F8F566D8DC57
C097E8F91833AFEFEAAED76CA1E6410B5A33C48AA11245881C867ACC13816EBC
12CCC3B30B4480872108130A6ED884E23D36B338DB9EFC096E5CAA32C3A699D6
50CA29D33375D176F37D1623B4075C61D9C5152F2A4FB5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Medi
%!PS-AdobeFont-1.0: NimbusRomNo9L-Medi 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Medium) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Medi def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -341 1000 960} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E178732AD0E135F772215
EA7EB7EA7641D31502E1BB9661E7B0E875AEE90400138F2AAF4A8686C73EAA44
E5CAB467770A3D12E9807BAC97B24A8EFB0E276760F4F51EC7123C43BC6F8DCF
9A2F496A9172813FB461FD870763306B45670653A9780FF409B734CFA74C12CD
150B03344295918C4ED893FB620A9499404B83C71152BF2F2DBF769000D116D5
EE264C016EE3E1241018F59544CCE53E5AEC124CF6C59A4D7D7D511ECC9AFD49
6608ADDD237358D7CF8B4D1C5BD1158CDF2D6469D9BD6E6D9762ECF34D1C3C27
5F69900E0D12AF9B21F153585742E999870BEE3DFF6309CD82968EBB40D9C269
CD4306654AAB6734151132DE4194072485FD082FBB6DFCB3FDFF9E1FC88D9483
8AA64B5825293978C70C9EC095B18352BFDC34B4BE9C939384E3281BCC6B1808
A6B61EC4E47BB6AC14B105FFA7ED6AE99A1CA0B360D1A5C24E0FBB55C66F5811
A5CD0625654654651979A8C4C3612054181CD300CD42D1D9CAAA589118D6C7CD
5EA8A9A0C639D5539430D40318F4B739DA281ABF2BE2765D44F45B218BB192E1
9EFBDDF7777E8730FA7DC0651BCD5D68EB743C51D9CED55403021D45F77CAB5E
7E892B3D1F875DA86C030A2387487DBAC8795749E849EC93439C9E22EB20D11D
07DA0F09EE9356D55B8D0D8555F1B0EC98C72863B376D3436E10DE2FB1AB9453
DADA019DCB64F6D059AB3A95B28B94435004C9A8BD3FB80E2B9DE0E330D03622
3AD965B4283E6DC880A2130185CDABC053C52693CE3F50557F524D7CCA9BE05B
FF9597ADF5D1C432C00C0B0D8EC2CA8436685B4BF3E2105B89FA6CC787B77637
248796C2F43872B3BFC8011159C22EDB7149AD8932360A88A223CC638BED257E
04908032ADA750F17279F7331189C322CB5ED9B66E502945BEB1EC68B1C7BCC0
2322EFD669C229B28CE1D0CBC0005FF967D0A4383E29538AFA13D41D484D739E
487D497DEAD8F661847A5D82D77D91219ACF666E565292384728E58E1A489054
8C3E34B413A6A550C499218E7FCF43694CBEAD016119CE85515F5EDAE3CD483B
A0F32743E7A189708AF0CB6FBAB22AC8F23604FFECE038C838472CA40ADEBF08
47AB1D450E07F9D51828D25DDCA679E3FAE54634A37AE1A5A778365C5A2C8A27
64085AC775AC132CCF27CA164C4721F67B63D52E388B17122F15E5DF391674CC
B6C9EDE307D79E390068970FE0AB210337558544E8CA59BD81BE2A2261F78F0C
0818078B97D227298B84B6450BDD689A1085FCFACCEEBECD2B3EDE3B6561AFC3
A88E05ED5D96C837B3386ABF1048FE5CC2AC87A20A2F4A4332E04AF4DAEC6833
0660124E1CB212491DDC3FB1BE0128C6BD451109B826A3F23AEBD548E162C8F5
00795C37140E174238F7244B70176FDE8BB55FE63644139AD51CBD4EB1602085
03B500BC04C5AC8C3ECEF730F19B1FDA0404D57A4CF50A7A0C598C94E6C4B5FA
CE948FADA3945615757B4F6E23CDC440D0080DABFF2734C47FE82783709F7FEF
662FD2247972AFDB47112BBA53EC6B0DF67C1F9130848D4C00F351F5EF1DFDE2
2FD3FE33438AF5EA6551401BBD1686E75ED13F2D9C1D079DF942D87F704CAE06
6DDC7393F29B4D933306793C754111044E6E722D2FCFF856FA5F423972AC19B5
BC04DF4D12A1AA1ACE9E4426114DD821579901B8563C2F6639740C34B0DF36A8
825B776FAAEF162FA24EB17C99F0E8F2B4D90FFB8BE2F427D339D1EEBAAD58B0
946C6CB25C2A504B014DCE8D922CA473ADFBFF85285CFE4B7008D30261A45ED8
C77C60D7FD136F67417FDD31346A690D7804DE2809825F71D5DD1A1A289CC921
6E531C9E6473D42A8B3B0186016DA79107228DED1B4AC19DBF653EB0FF18A376
FF6FDE547A4CD3C7D183BC275C8F03EC5214CF8D728E34323537C57C4D9349C6
85294170750D3891D7D3447483F0977A944BBF51C1E2DAA0AC5EFFB3126DE50C
70065D2A42364D5D18B9C00094C819D594746B67554206ADA08992CBDEF437D0
EA9EBD6CB8017A27E311AE62FE08BEE58F2B33AD6AB36E47A3E91301863DA4F8
85FE0CF685B6724744DCE50D973B0468FD4F84E83950B76B1A05B4DC730087F4
5FEE52B749BD29F44F0EDDC2A33E97D36AB8A7DF9D1BCCE6038D184DC74E2E18
6A664391B7B84E228693189C18F52673F12725F3351ADD2CCF348A72E80463A0
56D041B5F2C74A612BD655B38DF603DB446FF707D396FB0630AE944938B0FF61
097B8C98ADDF18647596B914B7DB80614C0243F3B3C291206608A791091D792C
1DAFD35FDA10C0E14D125C730ADCBACC2CB9214A49E4A05E2A67BC0B4901E9BC
FB5BDCE3DFEC18B9C0BCEDB0E2DEF7ACE895397DFAF366B982B1E79D6A18D590
9E018340477402CA73CFC7A2564942BB5BFCFF44DE8B99D6205FECE23D72A9F6
1619E09C929D794526D5861D0184F4956DB9D9BEEF25BF02427895544C4F20B9
D3F72A9B0E07A2F65B9923E587A4AB67D5CB21E1D3D968967A1447E5C9D5156F
2043E9B5755BFA1E9BFDF47E63B2FA3D45790646F8B3F94876E24EA10115DEA0
1BA7890B3A1123170D993F727ACDCEF79B094A8CB83BDA634521CD754B51844E
7FDA50A9095E080E8FEFB94BDCA9B0C35BD20B737640F3A29959AC97AB16CFFA
3F66FAFBD0B269C85A2743EA914B835C049C95D62D8089E4AE7B8D46F33B1E07
3A873D33E038A136F8256B7DCCA0D7503A0750027042AE2D2DBE35AE5B6CEB2B
2A3C2A5085BB0E87DFD0B90AC7CF3725FB707ED9526ED054C471B82AA52B6C09
0D4A89537D321DB5621BE2BB042A97301D2FE70F509161F730765D9FDBB76901
4EB777D03A2D20FD7ED73DBE1EF745F2E3EE3C0F379E76451D99AA82119E8EEF
A0F30FFC24EFE5C7FD42DBC5FD7EC83D687FCB4D1D8550643AB0BB89428A16AB
1066530BA1C89585BE48B92FA6A323C0FB989D53EB4A5AC25A0858B10DC043C8
4036588A4234FC70CC583D630C563D9C33FCE5BF7177876CE1CFE159231A026D
3A3F89047579FD28BBF82F9DEC7BD65B80885F9C3574339A61253C3234BF4864
C7109103FBDF1B4DA7CE2B7194624D33B42527A190E9EAA689EBC39EA345CDF8
3CACD2D870186012B0526E8F49CE50FF9DEF3B4A4C1BEB3848EAA347734A49C4
09A009674D3973F49E02479CFCBCC6F3F4448229D15D0FFA4E22B5A0CB4FC82C
4BB848D07EDE0C150C876A61EE0592365D4A01DC96667E2896098DC756EB95C1
625B55A0E9FBCE5C95B7240F7804FB337193FB904015AA56AE725E5AEE820FFA
C056863E893BFA770EED87D94F45B85F3948863924D5F3355F74426C91FADCA2
9EA131D482990CB64C201664D2D13D7772CC0518B7AF4FC2F56904C2849F7F05
BD9E5029B6C34329FA3F773B665ADFF0135A65ACB5311765991CF95780825F9C
769CD611F343C793DEDEFB0A2B19553FB4D299C662F932D9ACE5DB35BEA759F5
86AD85B58F0E770E97CE991AFD7C74C059790FBF0497F8CCCE350E08DF242157
F4D3DB0519EA9095EE0320B1B6AF51F7F499C10BBFBDCF134E1D1EB8B3146101
83673442C0006B5BC5FAB5960A2E3E914A4330CADA810A961053A1CE69925714
8F05FF52FA676F494084491532ECA79ABC48A480AA1D487B44D781B5BB46CE54
5741EAE68EE79FAB1AD93D487B55DD41D840427BD445F7F0A633C5C75AB4DA5E
D0E87C1C9CB7BB49A6D4B8224C70EC40B6CA02265D3C7159A63851DF7FC25EEA
E4AA84A552EB9F11282AA5868A85B43A6DF28A9B352A56D25DBE0BCF9CF6E582
3070CF6E408ECA369B0FCB775E115A31D321B7CA77B4BF93A6FF7312CB35F155
931BDA8ACF7DBCCB544FE9AB1E30F0E7EB4CA1F1E59DB376BDC95DCBE496801B
809649E22B019F7D0C44B48FF198FC4BC6A7FA852C81D0F3B962DB19DCB7A289
E43494FE75D5E0169F111A03F47F96D84265D942ED54E36A6985DD1CCB62FEC5
AE724457E9628C077A0C7218B75A1730529B3EE149554EB95268A1A07E6E7BCD
1EE19F12431DAB4869A982293003C83BC5371513272676E14F6CE80610BFB320
B3D0914BE2359C910FCEF969AE162EEB5128796E46CB0AF4B537987C2ED552B3
7D89AC319FF9987350C3D9BCA7F584B4D9E304CF61456FE8BD1CE8C88379E352
496A755F2590068032B92728D8D181B02711EE2C105FBB16BAAF98F469068B96
FE758E5F6AFC8EE6E2EE98763933D814901FDEB3C6BFCA7D5B5D62A97BCD0393
1315E78D198FB6DD459C4FA4D4D5663E33173E5C99CB752EB3EEB45A26663E1D
DAA071AD0580BC14CA70AEA97FF4B704F7641BC26DF2D3B6C69E17A074031B8E
C4BFCCC16DC273D4A01351607BA2BE87050F8AE8EA728056655F9D9DA1ADB426
600F1031E55353DAEB143ED668003E3196A1B017D425EA62AC3112B58FAB45A6
0654591AC4B14842517F00FC1D629B6246DA4B173E17D86169742ACD19021D74
A1940C45FCD7F44AC16C85EB8F714DD0B43D864F54FE38A902AE6D7304413D97
05D505D7E7D4ED50CE2FF86DFD7F135D9E5C692041B40DFE0F6F3165A4E34E80
0005B26DBEC70A2850505C5CCA6F46D2C4019EB0EEDC660503269A4CADA9C9BB
CF1FC027311D4598C10A9B7550B239E8E03B81B713F3738BC8F3C16DE6CACF4C
3FF495F0D3B1317D4933E1E097ADDCDF6C39A8267B043DD1A309A1F1C31BF683
F9E3394F5DCE090D90C29776BF27FADED563AF292C8F30EC94404B83D25D0B9C
6EF72F6CA9EE71D716A24400838BC9155AB8D6C978DC702A7278890312F6E32B
536B9E7B2AB0A08A26B00280FE57F6CB0CB72BC26EF0ECDD2EE04EF3438178B0
28CA1BC3EEFB3E577C48B5548AF391D8C2BEA9DF0505C07E64B2D4509D1270CD
BEFF01A02D940E4940EDD811F9173B6F38EE9682307719C216B78AF7D2C3AEF6
9D55E28F1C35B0F07E78405DBB56FE1FCAF127BB879BD6062EF555AE24118F10
5F6770EEF2A57C5D44EF25E03AA1D0FAB54AA5821C4CB010AE179F63449126E9
CF217F7B9B18573B6CBD958A80FA14221F9ACFEAFDABCD2E99512D7844262AAC
E40E04F2BC627789E46B9910B70329CBC2AC275331FF480589012D7881C8E03D
A740600A25C51B85D1535C7478549B57DFE1580FDF050DEF65C161371032BE49
02BBD57AA5DC285EA30F18F36F483A641593A39E464E463B7B35AB3B8B673948
353219E93686D71738FE955FD7C67F11323E059BCD0C4E764AE61D7F5B5320DB
4E6C7F70B76CB486438D247D02333EFCBBF060F416C0B747EC5BA54AA7431540
84CCBBC6E6D1CEC49379962163A2B4BF57C589CE3DE6B2E2B8BFA66D87D20D1F
0B525DB06AC0C91AA11485015CC8BF8410A9A3943D196A412094119F6C7B8423
48893BB54CEE91B713822F634A96C5D1923710DB4B98B063FA07A6AB8930A0F1
A91C4A87084317B0021AAD5B1ACB2EBBF8AA9C0ADD7871030A2C1BEFD70276C1
8EB95EE1DEE2A74D122024D8908193BFF7C859EA8BCBF00C29AB8B417E2D6061
A388518B2ED68C57A38EB777CF374EC9E2840D004128E560F529B5A0225C25FA
4A1A479CE74E73450DE33CDBDD3C498417FE9433E3B6F2250FDA0DA16F257094
D0707ACFA605AF27BC7C271E0FFBE6FE4DC59944B5F4CF66AED72560D097FF0D
DBFCA58F432895B2FCAD0770DB57D747E2CD3E5D7EC095EBE86A3FC84D6B43A1
D69471CE6B07099A86078C8303A243E64747AC9BB1C1720D0D828005E45C4829
5AFED40F9A5C87B89B8C1DB75297369C388B60B536E896C8FE14E25E11BBF6F7
C89C534054CD95C75832CE95F6A365E78ADF8450F5A6F346FD038951DBEAD723
DAA840E0D183D356A739B0EE96E5CBA142A9F61F90C6E4604EDB1A1987F24ED1
F7752E57D258513B1194C6CCAB82EF9ECF08B30264694172F9A75331B916E3B0
C506FE8FDFA6F544B4264BA6D59C71961E64CE675ABF475542648A4DFB65D7AD
4E0C08A5B355BFF7A0B588D61276F94706B29796358956C55E2AFF9E1DD9AC26
BFFE275C7B24275AAE2770913C95D583F3D0CB9806986A8ECAC7D4E624353575
E13D49DD5AF366220D28DC3CA12D0216F822CBAED2657A1913E3C0A21FC66714
3C47B8070D31E6FC60F8C7961BA96362CA771E3DB9DBA6C6B4A83F47864D1624
747054CC3E674581B8E88964F9AB5B38469000FBF31BAE9CE8703754A099D21B
332EE9982E862434D6CB5D80F69E0010B97E1A371ECA95C00CFEB7BC007EC513
9AE5F97CC20BFC1CCC32E8EE6EEC2E85D97BCFB18CDAFB031825A94036EE5A0D
74993713AB2FDC96FD1FD6FEF354D434F560BD28D2EFC5F1EED95633398B60B4
2A10D09EA4F965ECFE8DDB84EEADD52959480D929CBBA73E0C6F8C7DDDFF2043
A5062787517EA4372A5E959066CE29147D7B9D892099BC54870A23A5789C26CF
5AFC45AC771C052CF25114C7E42171C091446F1DB0DEC0A32ED259AF8D2CC281
25CAF20D193C806EBAA623C61C37176DE8455D07DB8103465408281EC36BC0DA
6288B860B6A245A193BC1C1E95DEC7CD476BBE52889CF79BBACA1EBDB49DDC59
C2CCD49D0606CCE8386E84D5B0804EDF9C6FBEB0593BDEB758BFDA810D03A2F6
162F82FE0EDCE29872B923A35D3A67B9E294FEAB91422B5A00E51053A145E468
51E77A1BEF91E8EA2859B0C2143680982ECFF57BD7D47576539CED329AAA92E1
A57C55DE7BC0710161190B5B9084064E42A5A182034F00D27A4450A639E482C9
24A873A404ACBBE4BE3A42BDF31AEBB9A4920D9E6E5F78C3FD71D75F442F2AD1
7C6451A79F4041BAF27C79B77B5836E63C7CA9BBF875EFEB0DD1FC27CD0D8729
B2E3D74EBAF8B07234CF384CD28091D0388E33BF561718FBC8D5747F07F456D9
4FF632DB66342979E8CF744F0A87353F22DB6C67E12DE0AA9B5CB2206868F3A6
9C33D04B4D7AFE1C4DE40BB707939D0F05AAC04DBC0E2D8B95AE1279F582C139
86D8D0302064C44333F759EEEE2757B16266E3A6B986552612384838E736ABB3
3492EE0CED4ED94CDDDF630BEF143560CE7FFCE1D91CD5EFC89CEB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (main.dvi)
@start /Fa 133[37 42 42 60 42 42 23 32 28 42 42 42 42
65 23 42 23 23 42 42 28 37 42 37 42 37 10[60 60 51 46
2[46 60 2[51 2[28 1[60 46 1[60 55 55 60 5[23 7[42 4[21
28 21 4[28 36[46 2[{ TeXBase1Encoding ReEncodeFont }47
83.022 /NimbusRomNo9L-Regu rf /Fb 170[60 46 42 51 1[51
60 55 69 46 2[28 2[51 51 1[55 51 51 65[{ TeXBase1Encoding ReEncodeFont }
15 83.022 /NimbusRomNo9L-ReguItal rf /Fc 133[33 37 37
54 37 37 21 29 25 37 37 37 37 58 21 37 21 21 37 37 25
33 37 33 37 33 12[46 42 14[54 16[37 4[19 25 42[42 2[{
 TeXBase1Encoding ReEncodeFont }33 74.7198 /NimbusRomNo9L-Regu
rf /Fd 139[25 29 33 14[33 42 37 31[54 65[{
 TeXBase1Encoding ReEncodeFont }7 74.7198 /NimbusRomNo9L-Medi
rf /Fe 137[46 46 6[46 71 1[46 1[25 7[41 20[56 7[66 68[{
 TeXBase1Encoding ReEncodeFont }9 91.3242 /NimbusRomNo9L-Regu
rf /Ff 133[88 4[100 55 78 66 1[100 100 100 1[55 2[55
2[66 88 3[88 10[144 2[111 12[111 1[144 133 10[100 1[100
1[100 100 100 100 100 48[{ TeXBase1Encoding ReEncodeFont }25
199.253 /NimbusRomNo9L-Regu rf /Fg 205[29 29 49[{
 TeXBase1Encoding ReEncodeFont }2 58.1154 /NimbusRomNo9L-Regu
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author (Davian Lukman)/Keywords (cs461''senior capstone''problem statement''draft)
/DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -331 a Black 0 TeXcolorgray 3721 -223 a Fg(1)p
Black 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 0 TeXcolorgray
150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 0 a 150 0 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 0 a 150 0
a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 18 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 0 a 420 136 a Ff(CS461)69
b(Senior)h(Capstone)f(F)m(all)i(2018)927 485 y(3D)e(V)-12
b(isualization)72 b(of)e(Data)1651 734 y Fe(Da)n(vian)31
b(Lukman)p 233 1332 3517 4 v 1811 1465 a Fd(Abstract)p
0 TeXcolorgray 0 TeXcolorgray 316 1652 a Fc(Scientists)k(are)h(often)g
(getting)g(problems)g(to)g(lea)o(v)o(e)f(a)h(mark)g(for)f(their)h
(audiences)h(in)e(presenting)i(their)e(data.)h(The)316
1776 y(purpose)28 b(of)f(this)g(project)h(is)e(to)h(display)h(an)f
(interesting)h(method)g(of)f(presenting)h(data)f(that)g(could)h(be)f
(used)h(to)f(satisfy)316 1901 y(the)h(audiences)h(and)f(also)g(helping)
h(scientist)e(to)h(\002nd)f(ne)n(w)h(possibilities.)g(The)f(solution)h
(of)g(this)g(problem)g(is)f(to)h(mak)o(e)316 2025 y(an)e(application)g
(for)f(the)g(researchers)i(to)e(input)h(their)f(data)g(easily)h(and)g
(visualize)f(them)h(in)f(3D.)g(The)h(\002rst)e(test)h(method)316
2150 y(that)33 b(needs)h(to)f(be)h(described)g(is)f(writing)f(a)h
(problem)h(statement)g(to)f(ful\002ll)f(the)h(requirement)h(of)f(the)g
(applications.)316 2274 y(The)26 b(second)i(step)e(is)g(to)g(design)h
(a)f(user)h(interf)o(ace)g(to)f(let)f(the)i(researcher)g(easily)f
(input)h(their)f(data)g(and)h(timeline.)f(The)316 2399
y(third)31 b(step)h(is)f(to)g(implement)h(the)f(program)h(based)g(on)g
(usability)g(problem)g(and)g(requirement.)g(The)f(results)g(will)f(be)
316 2524 y(deli)n(v)o(ered)25 b(to)f(the)g(clients)f(through)j
(presentation)f(and)f(implementation.)h(The)f(program)g(will)f(lik)o
(ely)i(to)f(ha)o(v)o(e)g(b)o(ugs)g(and)316 2648 y(it)i(is)g
(recommended)i(to)e(be)h(re-e)o(xamined)h(to)e(fully)g(polish)h(the)f
(program.)233 2859 y Fb(PR)m(OBLEM)i(ST)l(A)m(TEMENT)150
3009 y Fa(The)d(problem)f(of)i(this)g(project)e(is)j(ho)n(w)e(to)h
(display)f(data)g(for)g(in)h(interesting)f(and)g(challenging)f(w)o(ay)h
(to)h(client)g(focused)150 3158 y(media,)34 b(such)h(as)g(Po)n
(werPoint,)f(Blogs,)h(or)f(V)-5 b(ideo.)34 b(Before)h(going)e(on)i
(further)m(,)d(the)j(de\002nition)f(of)h(data)f(is)i(needed,)150
3307 y(which)25 b(includes)g(IP-Address,)f(hash)h(of)g(mal)o(w)o(are,)g
(name)g(of)g(mal)o(w)o(are,)g(Geo-Location,)e(tag,)i(time,)g(etc.)h
(combined)d(in)150 3457 y(a)30 b(\002le)h(called)e(CSV)-11
b(.)31 b(Displaying)e(data)h(to)g(clients)g(can)f(some)n(what)g(be)h
(dif)n(\002cult)f(if)h(visualize)g(incorrectly)e(or)h(without)150
3606 y(proper)22 b(descriptions.)g(It)h(becomes)g(harder)f(when)g(the)i
(clients)f(are)h(not)f(a)n(v)n(ailable)g(in)g(person)f(as)i
(presentation)e(can)h(only)150 3756 y(occur)28 b(using)g(media.)g
(Since)h(the)f(clients)h(ha)n(v)o(e)g(to)f(kno)n(w)g(what)h(the)o(y)f
(are)g(reading)g(without)g(being)g(guided,)f(\002nding)g(a)150
3905 y(w)o(ay)i(to)f(present)g(a)h(data)f(in)h(a)g(ne)n(w)f(w)o(ay)h
(could)e(be)i(challenging.)150 4055 y(On)g(the)g(other)f(hand,)g(there)
g(are)h(actually)g(man)o(y)e(applications)h(to)h(display)g(data,)f(b)n
(ut)h(not)g(all)g(of)g(them)g(actually)f(uses)150 4204
y(an)j(interesting)f(and)h(ne)n(w)g(w)o(ay)g(to)g(display)g(data)g(or)g
(perhaps)f(not)h(enough)e(information)g(pro)o(vided.)f(The)j(usual)g
(data)150 4354 y(presentation)d(are)h(sho)n(wn)f(using)h(charts)g(or)g
(tables.)g(This)h(is)g(a)f(usual)g(w)o(ay)h(to)f(present)g(a)g(data)g
(due)g(to)h(its)g(simplicity;)150 4503 y(ho)n(we)n(v)o(er)m(,)20
b(it)k(pro)o(v)o(es)d(to)i(be)g(hard)f(to)h(read)f(when)g(the)h(data)g
(is)g(big)g(enough.)d(F)o(or)j(e)o(xample,)e(using)h(tables)h(with)g
(too)g(man)o(y)150 4652 y(columns)30 b(can)i(sometimes)f(confuses)f
(the)i(reader)e(to)i(misread)e(one)h(or)g(tw)o(o)h(ro)n(ws)f(abo)o(v)o
(e)f(or)h(belo)n(w)-5 b(.)30 b(Since)i(timeline)150 4802
y(and)26 b(Geo-location)f(input)h(are)h(tw)o(o)g(of)f(the)h
(requirement)d(of)j(this)g(project,)f(using)g(time)h(line)g(chart)f(is)
i(not)e(a)h(good)f(w)o(ay)150 4951 y(to)j(demonstrate)e(data)h
(presentation.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -331 a
SDict begin H.S end
 142 -331 a 142 -331 a
SDict begin H.R end
 142 -331 a 142 -331
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142 -331 a 0 TeXcolorgray 0 TeXcolorgray 3721 -223
a Fg(2)p 0 TeXcolorgray 233 100 a Fb(SOLUTION)150 249
y Fa(The)41 b(solution)g(that)g(can)h(be)f(of)n(fered)f(right)h(no)n(w)
g(is)h(designing)e(a)i(3D)g(visualization)e(of)h(data)h(presentation.)e
(3D)150 399 y(visualization)d(is)i(important)d(because)i(the)g(data)g
(includes)f(location,)g(which)g(will)i(be)f(accurately)f(presented)g
(on)g(a)150 548 y(globe.)30 b(Since)h(this)g(is)h(related)f(to)g(huge)f
(amount)g(of)h(data,)f(a)i(database)e(is)i(required)d(to)i(sort)h(all)f
(data.)g(Database)g(can)150 697 y(be)h(used)g(to)g(relate)g(other)g
(data)g(in)g(the)g(repository)-5 b(.)30 b(F)o(or)i(e)o(xample,)e(k)o(e)
o(y)h(data)h(w)o(ould)g(include)f(IP-Address,)g(hash)h(of)150
847 y(mal)o(w)o(are.)h(IP-Adress)g(will)h(be)f(link)o(ed)g(to)h(user')
-5 b(s)33 b(name)g(and)g(location)g(of)g(the)g(user)m(,)g(while)g(hash)
h(of)f(mal)o(w)o(are)g(will)150 996 y(be)i(link)o(ed)f(to)i(name)e(of)h
(mal)o(w)o(are.)f(Another)g(solution)g(can)h(also)h(be)f(achie)n(v)o
(ed)e(with)i(just)h(reading)e(CSV)i(\002le)f(with)150
1146 y(b)n(uf)n(fer)c(and)h(read)g(it)h(and)f(store)g(it)h(to)g(the)f
(memory)-5 b(.)30 b(F)o(or)i(the)h(timeline)f(solution,)f(usage)h(of)h
(side)f(scroll-bar)f(can)i(be)150 1295 y(used)26 b(to)g(properly)e
(displaying)h(a)h(certain)g(time.)g(Perhaps,)f(a)i(feature)e(to)h
(compare)e(tw)o(o)j(or)f(dif)n(ferent)e(timelines)i(is)h(also)150
1445 y(necessary)-5 b(.)27 b(A)i(line)g(will)g(be)f(displayed)g(around)
e(the)j(globe)e(to)i(sho)n(w)f(connections)f(the)h(spreading)f(of)h
(the)h(mal)o(w)o(are.)150 1594 y(Another)d(solution)g(that)h(can)g(be)g
(of)n(fered)e(no)n(w)i(is)h(a)g(use)f(of)g(3D)g(line)g(graph)f
(inspired)g(by)h(human')-5 b(s)26 b(neuron)f(cell.)i(This)150
1743 y(solution)h(remo)o(v)o(es)e(the)j(Globe)e(User)i(Interf)o(ace)e
(features)h(to)g(determine)f(the)i(location)e(of)h(the)h(IP-Address;)e
(ho)n(we)n(v)o(er)m(,)150 1893 y(this)j(line)f(graph)e(will)j(sho)n(w)f
(nodes)f(that)h(will)h(tell)f(the)g(k)o(e)o(y)g(data)g(and)f(can)h(be)g
(click)o(ed)f(to)h(open)f(another)g(windo)n(w)g(of)150
2042 y(the)33 b(complete)g(data.)g(The)g(use)h(of)f(this)h(graph)e(e)o
(xcels)h(in)h(its)g(time)g(feature)e(as)i(the)g(users)f(can)h(zoom)e
(in)i(and)f(zoom)150 2192 y(out)h(to)h(see)g(the)g(connection)d
(between)i(speci\002c)h(timelines.)g(The)f(lines)h(should)e(also)i
(de\002ne)g(the)f(spreading)f(of)i(the)150 2341 y(mal)o(w)o(are.)24
b(Same)h(with)g(the)f(\002rst)i(solution,)d(this)i(solution)f(requires)
g(the)g(use)h(of)f(database)g(or)h(read)f(b)n(uf)n(fer)f(of)h(CSV)i
(\002le.)233 2491 y Fb(PERFORMANCE)i(METRICS)150 2640
y Fa(The)34 b(project)f(is)i(completed)d(when)i(an)f(interacti)n(v)o(e)
g(3D)h(visualization)f(of)h(data)g(can)f(read)h(CSV)h(\002le)g(and)e
(stored)g(in)150 2790 y(the)d(database)f(or)h(v)n(ariables.)f
(Interacti)n(v)o(e)f(3D)i(visualization)e(will)j(includes)e(timeline)h
(and)f(geo-location)f(to)i(impro)o(v)o(e)150 2939 y(the)f(interest)g
(of)g(the)g(audiences.)f(A)i(good)e(design)g(of)h(the)g(User)h(Interf)o
(ace)e(will)i(be)f(the)g(secondary)e(objecti)n(v)o(e)h(of)h(this)150
3088 y(project)f(to)g(further)f(enhance)g(presentation)g(e)o(xperience)
f(for)i(the)h(users.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
